(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{426:function(t,a,s){t.exports=s.p+"assets/img/tongyongjiagou.57cec000.png"},427:function(t,a,s){t.exports=s.p+"assets/img/zhongtai.0e27e90a.png"},428:function(t,a,s){t.exports=s.p+"assets/img/tongbujiagou.ca29f2df.png"},429:function(t,a,s){t.exports=s.p+"assets/img/yibujiagou.d0f551e0.png"},430:function(t,a,s){t.exports=s.p+"assets/img/dianshanxiadan.f8d5c9a4.png"},431:function(t,a,s){t.exports=s.p+"assets/img/yibuDB.a2388034.png"},589:function(t,a,s){"use strict";s.r(a);var e=s(20),v=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"再谈架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#再谈架构"}},[t._v("#")]),t._v(" 再谈架构")]),t._v(" "),e("h2",{attrs:{id:"职责"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#职责"}},[t._v("#")]),t._v(" 职责")]),t._v(" "),e("ol",[e("li",[t._v("理解业务")]),t._v(" "),e("li",[t._v("全局把控")]),t._v(" "),e("li",[t._v("选择合适的技术")]),t._v(" "),e("li",[t._v("解决关键的问题")]),t._v(" "),e("li",[t._v("指导研发落地实施")])]),t._v(" "),e("h2",{attrs:{id:"通用架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通用架构"}},[t._v("#")]),t._v(" 通用架构")]),t._v(" "),e("p",[e("img",{attrs:{src:s(426),alt:"通用架构"}})]),t._v(" "),e("h2",{attrs:{id:"微服务和中台-服务层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#微服务和中台-服务层"}},[t._v("#")]),t._v(" 微服务和中台--服务层")]),t._v(" "),e("p",[e("img",{attrs:{src:s(427),alt:"中台"}})]),t._v(" "),e("h2",{attrs:{id:"同步异步架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#同步异步架构"}},[t._v("#")]),t._v(" 同步异步架构")]),t._v(" "),e("p",[e("img",{attrs:{src:s(428),alt:"同步架构"}})]),t._v(" "),e("p",[e("img",{attrs:{src:s(429),alt:"img"}})]),t._v(" "),e("h2",{attrs:{id:"db层架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#db层架构"}},[t._v("#")]),t._v(" DB层架构")]),t._v(" "),e("ol",[e("li",[t._v("变本地事务")]),t._v(" "),e("li",[t._v("协调多个本地事务(提交+补偿)")])]),t._v(" "),e("p",[e("img",{attrs:{src:s(430),alt:"电商下单"}})]),t._v(" "),e("p",[e("img",{attrs:{src:s(431),alt:"异步DB"}})]),t._v(" "),e("p",[t._v("保证A发送DB到A发送MQ的原子性:把MQ消息存入DB1,然后再从DB1取出来")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlly1gg085sd4bvj31fq0qgqa2.jpg",alt:"image-20200621212015461"}})]),t._v(" "),e("h2",{attrs:{id:"op"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#op"}},[t._v("#")]),t._v(" OP")]),t._v(" "),e("p",[t._v("OP->SRE->DEOPS->AiOPS->NOOPS")]),t._v(" "),e("h2",{attrs:{id:"异地多活"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#异地多活"}},[t._v("#")]),t._v(" 异地多活")]),t._v(" "),e("p",[t._v("网关层+MQ同步,偏序关系最早的进行写入,同步时删除较晚的,然后通知用户已注销.")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlly1gg0ag81uk1j31440n013v.jpg",alt:"image-20200621223931447"}})]),t._v(" "),e("h2",{attrs:{id:"秒杀业务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#秒杀业务"}},[t._v("#")]),t._v(" 秒杀业务")]),t._v(" "),e("p",[t._v("降低数据层锁冲突")]),t._v(" "),e("ol",[e("li",[t._v("降读 : 缓存")]),t._v(" "),e("li",[t._v("降写 : 尽量把请求拦截系统上游")])]),t._v(" "),e("h3",{attrs:{id:"分场景-分读写"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分场景-分读写"}},[t._v("#")]),t._v(" 分场景,分读写")]),t._v(" "),e("ol",[e("li",[t._v("端上的请求拦截(浏览器/APP) : 限速,系统x秒内一次请求(js)")]),t._v(" "),e("li",[t._v("站点层拦截 : 限速 token,userID x秒内一次请求, ip拦截对局域网不友好, 站点层水平扩展")]),t._v(" "),e("li",[t._v("服务层请求拦截 : 限速(内存队列), 业务库存,数据库抗压能力")]),t._v(" "),e("li",[t._v("数据库 : 请求有效性")])]),t._v(" "),e("h3",{attrs:{id:"产品层面"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#产品层面"}},[t._v("#")]),t._v(" 产品层面")]),t._v(" "),e("ol",[e("li",[t._v("下单和支付的分离")])]),t._v(" "),e("h2",{attrs:{id:"优秀架构师"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优秀架构师"}},[t._v("#")]),t._v(" 优秀架构师")]),t._v(" "),e("ol",[e("li",[t._v("需求分析")]),t._v(" "),e("li",[t._v("架构设计")]),t._v(" "),e("li",[t._v("架构选型")]),t._v(" "),e("li",[t._v("容量评估")])]),t._v(" "),e("h3",{attrs:{id:"高可用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#高可用"}},[t._v("#")]),t._v(" 高可用")]),t._v(" "),e("p",[t._v("冗余 + 服务的自动转移")]),t._v(" "),e("h3",{attrs:{id:"无状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#无状态"}},[t._v("#")]),t._v(" 无状态")]),t._v(" "),e("h3",{attrs:{id:"负载均衡"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡"}},[t._v("#")]),t._v(" 负载均衡")]),t._v(" "),e("h3",{attrs:{id:"幂等"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#幂等"}},[t._v("#")]),t._v(" 幂等")]),t._v(" "),e("h3",{attrs:{id:"分布式锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分布式锁"}},[t._v("#")]),t._v(" 分布式锁")]),t._v(" "),e("h3",{attrs:{id:"分布式事务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分布式事务"}},[t._v("#")]),t._v(" 分布式事务")]),t._v(" "),e("h3",{attrs:{id:"降级"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#降级"}},[t._v("#")]),t._v(" 降级")]),t._v(" "),e("h3",{attrs:{id:"限流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#限流"}},[t._v("#")]),t._v(" 限流")]),t._v(" "),e("h4",{attrs:{id:"限流操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#限流操作"}},[t._v("#")]),t._v(" 限流操作")]),t._v(" "),e("ol",[e("li",[t._v("拒绝服务")]),t._v(" "),e("li",[t._v("服务降级 : 服务分级")]),t._v(" "),e("li",[t._v("延迟处理 : 请求放入队列")]),t._v(" "),e("li",[t._v("特权处理 : vip 用户优先保障")])]),t._v(" "),e("h4",{attrs:{id:"实现方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现方式"}},[t._v("#")]),t._v(" 实现方式")]),t._v(" "),e("ol",[e("li",[t._v("计数器 : 池化技术(数据库连接池、线程池等)")])]),t._v(" "),e("h3",{attrs:{id:"熔断"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#熔断"}},[t._v("#")]),t._v(" 熔断")]),t._v(" "),e("h3",{attrs:{id:"灰度发布"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#灰度发布"}},[t._v("#")]),t._v(" 灰度发布")]),t._v(" "),e("h3",{attrs:{id:"全链路压测"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#全链路压测"}},[t._v("#")]),t._v(" 全链路压测")]),t._v(" "),e("h3",{attrs:{id:"高并发"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#高并发"}},[t._v("#")]),t._v(" 高并发")]),t._v(" "),e("h3",{attrs:{id:"服务管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#服务管理"}},[t._v("#")]),t._v(" 服务管理")]),t._v(" "),e("h3",{attrs:{id:"分布式请求跟踪"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分布式请求跟踪"}},[t._v("#")]),t._v(" 分布式请求跟踪")]),t._v(" "),e("h3",{attrs:{id:"服务调度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#服务调度"}},[t._v("#")]),t._v(" 服务调度")]),t._v(" "),e("h3",{attrs:{id:"abtest"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#abtest"}},[t._v("#")]),t._v(" ABTest")]),t._v(" "),e("h3",{attrs:{id:"对外接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对外接口"}},[t._v("#")]),t._v(" 对外接口")]),t._v(" "),e("h3",{attrs:{id:"数据库与cache"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据库与cache"}},[t._v("#")]),t._v(" 数据库与Cache")]),t._v(" "),e("h2",{attrs:{id:"haproxy"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#haproxy"}},[t._v("#")]),t._v(" HAProxy")]),t._v(" "),e("h2",{attrs:{id:"keepalibed"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#keepalibed"}},[t._v("#")]),t._v(" keepalibed")]),t._v(" "),e("p",[t._v("通过虚拟路由冗余协议实现服务之间故障切换,正常工作时主节点不断的向备节点发送多播心跳消息告诉备节点自己还活着,备节点收不到心跳后调用自身的接管程序接管主节点的 IP 资源和服务.主节点恢复时备节点释放主节点故障时接管的 IP 和服务,恢复原来的备用角色.")]),t._v(" "),e("h2",{attrs:{id:"副本一致性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#副本一致性"}},[t._v("#")]),t._v(" 副本一致性")]),t._v(" "),e("ol",[e("li",[t._v("强一致性 : 任意时刻用户读取任何节点都可以读到最近一次成功更新的副本数据")]),t._v(" "),e("li",[t._v("单调一致性 : 任何用户读到某个数据更新后的值,不会再读到比这个值更旧的值")]),t._v(" "),e("li",[t._v("会话一致性 : 用户在某个会话中读到某次更新后的值就不会读到比这个值更旧的值")]),t._v(" "),e("li",[t._v("最终一致性 : 一旦更新成功各个副本上的数据最终将达到完全一致的状态,达到完全一致的时间无法保障")]),t._v(" "),e("li",[t._v("弱一致性 : 更新成功后用户无法读到这个更新的值,即使在某个副本读到了新值")])]),t._v(" "),e("h2",{attrs:{id:"池化技术"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#池化技术"}},[t._v("#")]),t._v(" 池化技术")]),t._v(" "),e("p",[t._v("线程池、内存池、数据库连接池、httpClient连接池")]),t._v(" "),e("h2",{attrs:{id:"业务场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#业务场景"}},[t._v("#")]),t._v(" 业务场景")]),t._v(" "),e("ol",[e("li",[t._v("1对1 : 一个用户一个登录账号")]),t._v(" "),e("li",[t._v("1对多 : 一个用户发多条微博,一条微博对应一个用户")]),t._v(" "),e("li",[t._v("多对多 : feed流,一个用户可以关注多个用户,也可以被多个用户关注")])]),t._v(" "),e("h2",{attrs:{id:"smc定理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#smc定理"}},[t._v("#")]),t._v(" SMC定理")]),t._v(" "),e("ol",[e("li",[t._v("任何端到端的消息传递协议必将引入消息丢失或消息重复")]),t._v(" "),e("li",[t._v("不可能构建步丢失消息也不造成消息重复的通信系统,可行的通过各种手段降低这种事件的概率")])]),t._v(" "),e("h2",{attrs:{id:"分布式链路追踪"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分布式链路追踪"}},[t._v("#")]),t._v(" 分布式链路追踪")]),t._v(" "),e("p",[t._v("串联请求(请求ID)、调用时序(时序ID)、调用深度(深度ID)")]),t._v(" "),e("ol",[e("li",[t._v("统一框架、统一组件(web、rpc-client、cache-client、db-client)")]),t._v(" "),e("li",[t._v("统一配置管理(配置私藏到全局配置文件到配置中心)")]),t._v(" "),e("li",[t._v("自有协议")]),t._v(" "),e("li",[t._v("集中上报 : udp协议上报、落地log,异步上传日志中心")]),t._v(" "),e("li",[t._v("图形化展示")])]),t._v(" "),e("p",[t._v("如果每个请求都采集会影响性能,需要控制采集频率.多台机器通过如果携带 context 则强制采集来保证频率一致.")]),t._v(" "),e("h2",{attrs:{id:"tps-qps"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tps-qps"}},[t._v("#")]),t._v(" TPS & QPS")]),t._v(" "),e("p",[t._v("针对单接口 tps 可以等价于 qps, 如果访问一个页面是一个 tps, 可能需要请求 html、css、js 接口产生 3 个 qps.")]),t._v(" "),e("h2",{attrs:{id:"架构师"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#架构师"}},[t._v("#")]),t._v(" 架构师")]),t._v(" "),e("ol",[e("li",[t._v("组织业务")]),t._v(" "),e("li",[t._v("组织技术")]),t._v(" "),e("li",[t._v("组织人员")]),t._v(" "),e("li",[t._v("组织全局、对外输出")])]),t._v(" "),e("h2",{attrs:{id:"热-key"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#热-key"}},[t._v("#")]),t._v(" 热 key")]),t._v(" "),e("ol",[e("li",[t._v("提前预测 : 比如抢购")]),t._v(" "),e("li",[t._v("数据收集 : 客户端、服务端、代理层对实时数据进行采集汇总,达到一定数量后会被识别为热 key")])]),t._v(" "),e("p",[e("a",{attrs:{href:"https://gitee.com/jd-platform-opensource/hotkey",target:"_blank",rel:"noopener noreferrer"}},[t._v("JD-hotkey"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"分布式锁-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分布式锁-2"}},[t._v("#")]),t._v(" 分布式锁")]),t._v(" "),e("h3",{attrs:{id:"etcd"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#etcd"}},[t._v("#")]),t._v(" ETCD")]),t._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("put"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key,value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("/delete"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nget"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("/get"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("keyfrom, keyend"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nwatch"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key/keyprefix"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntransactions"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("if/then/else ops"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".commit"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 事务,etcd 中的事务机制可以理解为 if else 操作")]),t._v("\nleases:grand/revoke/keepalive\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("p",[t._v("etcd 通过租约,发送心跳来续租,和 zk 一样已经获取到锁的客户端宕机后临时节点就会被移除,无论是断开移除还是正常删除 zk/etcd 都会通知客户端,客户端接收到通知后再次发起获取锁,即重复获取锁过程.")]),t._v(" "),e("ol",[e("li",[t._v("创建完节点后获取节点下所有子节点,并对该节点注册子节点变更的 watcher 监听")]),t._v(" "),e("li",[t._v("确定自己的节点序号,在所有子节点中的顺序")]),t._v(" "),e("li",[t._v("对于读 : 如果没有比自己小的子节点或者所有比自己小的节点都是读请求,那么自己成功获取到共享锁,如果比自己小的节点中有写请求需要进入等待")]),t._v(" "),e("li",[t._v("对于写 : 如果自己不是序号最小的子节点就需要等待")]),t._v(" "),e("li",[t._v("接收 watcher 通知后重复")])]),t._v(" "),e("p",[t._v("每个 key/value 都记录了 3 个 revision,可以通过版本号来查询历史数据.")]),t._v(" "),e("ol",[e("li",[t._v("create_revision : 创建时的版本")]),t._v(" "),e("li",[t._v("mod_revision : 数据被操作时的版本")]),t._v(" "),e("li",[t._v("version : 计数器,代表修改了多少次")])]),t._v(" "),e("p",[t._v("etcd 会将每一次修改都记录下来使用 watcher 订阅数据时可以支持从任意历史时刻(指定 revision )创建一个 watcher,在客户端和 etcd 之间建立一个数据管道,etcd 会推送从指定 revision 开始的所有数据变更.")]),t._v(" "),e("p",[t._v("etcd 所有数据都存储在一个 b+tree 中,该 tree 保存在磁盘,并通过 mmap 的方式映射到内存,一个 b+tree 维护者 revision 到 value 的赢谁关系.一个 btree 管理 key 到 revison 的映射关系,当客户端使用 key 查询数据时首先要经过 btee 将 key 转换为对应的 revison,再通过 b+tree 找到对应的数据.在 etcd 中会运行一个周期性的 compaction 机制来清理历史数据,将一段时间之前的 key 的多个历史版本数据清理掉最终 b+tree 单调递增,但可能出现空洞.")]),t._v(" "),e("p",[t._v("lease 是分布式系统检测一个节点是否存活的租约机制.超时自动删除,如果需要周期性的调用 keepalive 方法刷新租约保证永不过期.可以在进程中创建一个租约并周期性调用 keepalive,如果一切正常该节点的租约会一直保持,如果进程挂了这个租约就会自动过期.允许将多个 key 关联在同一个 lease 之上,可以减少 lease 对象刷新带来的开销,如果大量 key 都需要租约机制每个 key 都独立的去刷新租约会给 etcd 带来压力,通过多个 key 绑定在同一个 lease 模式将超时时间相似的 key 聚合在一起减少租约刷新的开销.")]),t._v(" "),e("h3",{attrs:{id:"使用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[t._v("#")]),t._v(" 使用场景")]),t._v(" "),e("ol",[e("li",[t._v("存储元数据 : k8s")]),t._v(" "),e("li",[t._v("名字服务 : 进程启动后将自身地址注册到 etcd,api 网关可以通过 etcd 即时感知后端进程的地址,当后端进程发生故障迁移时会重新注册到 etcd 中,api网关也能及时感知到新的地址,利用 lease 机制如果提供服务的进程运行异常 api 网关可以摘除其流量避免调用超时.服务状态被 etcd 接管,api 网关也是无状态的,可以水平扩展.")]),t._v(" "),e("li",[t._v("分布式锁")])]),t._v(" "),e("h2",{attrs:{id:"步骤"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#步骤"}},[t._v("#")]),t._v(" 步骤")]),t._v(" "),e("ol",[e("li",[t._v("分离读写请求")]),t._v(" "),e("li",[t._v("拆分读请求、拆分写请求")]),t._v(" "),e("li",[t._v("考虑异常情况")]),t._v(" "),e("li",[t._v("考虑并发情况")])]),t._v(" "),e("h2",{attrs:{id:"早期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#早期"}},[t._v("#")]),t._v(" 早期")]),t._v(" "),e("ol",[e("li",[t._v("动静分离")]),t._v(" "),e("li",[t._v("读写分离")]),t._v(" "),e("li",[t._v("前台与后台分离")])]),t._v(" "),e("blockquote",[e("p",[t._v("站点耦合、读写延时")])]),t._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[t._v("业务-垂直拆分")])])])}),[],!1,null,null,null);a.default=v.exports}}]);