(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{425:function(s,e,t){s.exports=t.p+"assets/img/k8szujian.91fe211b.png"},601:function(s,e,t){"use strict";t.r(e);var r=t(20),a=Object(r.a)({},(function(){var s=this,e=s.$createElement,r=s._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[r("h1",{attrs:{id:"k8s"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#k8s"}},[s._v("#")]),s._v(" k8s")]),s._v(" "),r("h2",{attrs:{id:"核心组件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#核心组件"}},[s._v("#")]),s._v(" 核心组件")]),s._v(" "),r("p",[s._v("数据库etcd,调度器scheduler,集群入口apiserver,控制器controller,服务代理kube-proxy,业务容器kubelet")]),s._v(" "),r("p",[r("img",{attrs:{src:t(425),alt:"k8szujian"}})]),s._v(" "),r("h2",{attrs:{id:"nginx-ingress"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#nginx-ingress"}},[s._v("#")]),s._v(" nginx-ingress")]),s._v(" "),r("p",[s._v("通过前置的 loadbalancer 类型的 service 接受集群流量,将流量转发至 nginx-ingress Pod 并对配置的策略进行检查,再转发至目标 Service 最终将流量转发至业务容器. ingress 通过实现 nginx-ingress-controller 将原生 conf 配置文件和 yaml 配置文件进行了转化,并且动态更新策略,动态 reload nginx pod,实现自动管理,例如灰度发布自动切换流量.")]),s._v(" "),r("h2",{attrs:{id:"ingress"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ingress"}},[s._v("#")]),s._v(" ingress")]),s._v(" "),r("p",[s._v("一种 API 对象,它公开了从集群外部到集群内 service 的 http 和 https 路由,即 ingress 是 service 的反向代理,")]),s._v(" "),r("h2",{attrs:{id:"centos安装k8s"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#centos安装k8s"}},[s._v("#")]),s._v(" centos安装k8s")]),s._v(" "),r("div",{staticClass:"language-shell line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[s._v("\n")])]),s._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[s._v("1")]),r("br")])]),r("h2",{attrs:{id:"k8s部署应用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#k8s部署应用"}},[s._v("#")]),s._v(" k8s部署应用")])])}),[],!1,null,null,null);e.default=a.exports}}]);