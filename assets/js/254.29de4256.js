(window.webpackJsonp=window.webpackJsonp||[]).push([[254],{557:function(t,e,r){"use strict";r.r(e);var a=r(20),i=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"热门搜索字符串"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#热门搜索字符串"}},[t._v("#")]),t._v(" 热门搜索字符串")]),t._v(" "),r("h2",{attrs:{id:"trie树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#trie树"}},[t._v("#")]),t._v(" Trie树")]),t._v(" "),r("p",[t._v("Trie 字典树、前缀树、单词查找树.")]),t._v(" "),r("ol",[r("li",[t._v("根节点不包含字符,除根节点外每一个字节点包含一个字符")]),t._v(" "),r("li",[t._v("从根节点到某一个节点路径上经过的字符连接起来为该节点对应的字符串")]),t._v(" "),r("li",[t._v("每个节点的所有字节点包含字符互不相同")])]),t._v(" "),r("p",[t._v("Trie 树实现的时候可以在节点设置一个标志用来标记该节点处是否构成一个单词,也可以把这个标志改成以节点为终止字符的搜索字符串个数,每个搜索字符串在 Trie 树遍历的最后一个节点上把字符串个数加 1 ,即可统计出每个字符串被搜索了多少次(根节点到节点经过的路径即为搜索字符串),然后再维护一个 n 个节点的小根堆,依次遍历 Trie 树节点,将节点(字符串和次数)传给小顶堆,根据搜索次数不断调整堆,遍历完 Trie 树节点后,小顶堆中的 n 个节点即最热门的搜索字符串.")])])}),[],!1,null,null,null);e.default=i.exports}}]);