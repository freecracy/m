(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{502:function(t,s,a){t.exports=a.p+"assets/img/mysql-master-slave.db674b1b.png"},503:function(t,s,a){t.exports=a.p+"assets/img/mysql-zhixingguocheng.86b99d4d.png"},504:function(t,s,a){t.exports=a.p+"assets/img/innodb-b+shu.f60e1722.png"},505:function(t,s,a){t.exports=a.p+"assets/img/innodb-ye-1.865b4ce1.png"},506:function(t,s,a){t.exports=a.p+"assets/img/innodb-ye-2.a346073b.png"},507:function(t,s,a){t.exports=a.p+"assets/img/innodb-ye-3.623de80a.png"},647:function(t,s,a){"use strict";a.r(s);var e=a(20),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"mysql"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mysql"}},[t._v("#")]),t._v(" MySQL")]),t._v(" "),e("h2",{attrs:{id:"常用-sql"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用-sql"}},[t._v("#")]),t._v(" 常用 sql")]),t._v(" "),e("p",[t._v("information_schema : 主要存储一些数据库对象信息 : 用户表信息、权限信息、分区信息等")]),t._v(" "),e("p",[t._v("performance_schema : 主要收集数据库服务器性能参数")]),t._v(" "),e("p",[t._v("sys : 包含存储过程、自定义函数、视图")]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("name "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" test "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pivot")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" quarter "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" pvt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 行转列 pivot")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("name "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" test "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unpivot")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" quarter "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unpivot")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列转行 unpivot")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("replace")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abcde'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" substring"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abcde'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2,4'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'***'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 部分位显示* substring/replace")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("show")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("engine")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("innodb")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("status")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示 innnodb 信息")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("show")]),t._v(" master "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("status")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** show slave status **/")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" @"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@auto_increment_offset")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** 设置初始值 **/")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" @"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@auto_increment_increment")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** 设置步长 **/")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("alter")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" table_name "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("engine")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("innodb")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** 可以重建索引,delete 不会真正的删除数据所以会出现空洞 **/")]),t._v("\nchange master "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** 配置主从同步 **/")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("union")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("database")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** sql 注入获取数据库名 **/")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("union")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" GROUP_CONCAT"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("schema_name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" information_schema"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("schemata"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" schemaName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** sql 注入中获取用户所有库 **/")]),t._v("\nmysql "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--help |grep options -A 1 # 查找配置文件路径")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" @"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@basedir")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 安装目录")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br")])]),e("h2",{attrs:{id:"数据类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("类型")]),t._v(" "),e("th",[t._v("字节数")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("tinyint、smallint、mediumint、int、bigint")]),t._v(" "),e("td",[t._v("1、2、3、4、8 字节")])]),t._v(" "),e("tr",[e("td",[t._v("float、double、decimal(字符串形式存在)")]),t._v(" "),e("td",[t._v("4、8、精准浮点数,计算时不会丢精度")])]),t._v(" "),e("tr",[e("td",[t._v("text、blob")]),t._v(" "),e("td",[t._v("区分大小写、不区分大小写,会使 binlog 变大")])]),t._v(" "),e("tr",[e("td",[t._v("year、date、time、datetime、timestamp")]),t._v(" "),e("td",[t._v("YYYY、YYYY-MM-DD、HH:MM:SS、YYY-MM-DD HH:MM:SS (8 字节)、时间戳(4 字节,有时区属性)")])]),t._v(" "),e("tr",[e("td",[t._v("char、varchar")]),t._v(" "),e("td",[t._v("超过容量后跟 varcha r 没区别、早期是字节数,现在是字符数")])]),t._v(" "),e("tr",[e("td",[t._v("enum、set")]),t._v(" "),e("td")])])]),t._v(" "),e("p",[t._v("每个 char 占用相同数量的字符,如果插入字符少于定义的字符数量会在后面填充空格,如果插入的字符超过了定义的数量,后面超出部分会被截断.")]),t._v(" "),e("h2",{attrs:{id:"常用函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用函数"}},[t._v("#")]),t._v(" 常用函数")]),t._v(" "),e("h2",{attrs:{id:"存储过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#存储过程"}},[t._v("#")]),t._v(" 存储过程")]),t._v(" "),e("h2",{attrs:{id:"触发器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#触发器"}},[t._v("#")]),t._v(" 触发器")]),t._v(" "),e("h2",{attrs:{id:"示例-sql"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#示例-sql"}},[t._v("#")]),t._v(" 示例 SQL")]),t._v(" "),e("h2",{attrs:{id:"常用工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用工具"}},[t._v("#")]),t._v(" 常用工具")]),t._v(" "),e("h3",{attrs:{id:"优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优化"}},[t._v("#")]),t._v(" 优化")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("工具")]),t._v(" "),e("th",[t._v("作用")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("mysqltuner.pl")]),t._v(" "),e("td",[t._v("主要检查参数是否合理")])]),t._v(" "),e("tr",[e("td",[t._v("tuning-primer.sh")]),t._v(" "),e("td",[t._v("整体体检")])]),t._v(" "),e("tr",[e("td",[t._v("pt-variable-advisor")]),t._v(" "),e("td",[t._v("分析 mysql 变量")])]),t._v(" "),e("tr",[e("td",[t._v("pt-query-digest")]),t._v(" "),e("td",[t._v("分析慢日志,比 mysqldumpshow 结果更具体")])])])]),t._v(" "),e("h3",{attrs:{id:"备份"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#备份"}},[t._v("#")]),t._v(" 备份")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("工具")]),t._v(" "),e("th",[t._v("作用")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("mysqldump")]),t._v(" "),e("td",[t._v("一般备份小于 100G 的库.逻辑备份")])]),t._v(" "),e("tr",[e("td",[t._v("Xtranbackup")]),t._v(" "),e("td",[t._v("100G 以上的库速度明显比 dump 快.无力备份,直接拷贝表空间文件.")])])])]),t._v(" "),e("h2",{attrs:{id:"死锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#死锁"}},[t._v("#")]),t._v(" 死锁")]),t._v(" "),e("p",[t._v("死锁 : 一组进程中每个进程都在等待一个事件,而这个事件只能由该组中一个进程触发")]),t._v(" "),e("ol",[e("li",[t._v("可抢占资源 : 可以从其他进程抢占而不会造成其他影响,如内存")]),t._v(" "),e("li",[t._v("不可抢占资源 : 除非错误或异常,否则进程无法抢占指定资源")]),t._v(" "),e("li",[t._v("虽然抢占式资源也会造成死锁,这种一般使用进程重新分配资源解决")])]),t._v(" "),e("h2",{attrs:{id:"explain-结果"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#explain-结果"}},[t._v("#")]),t._v(" explain 结果")]),t._v(" "),e("p",[t._v("explain 并不会真正执行,模拟优化器来执行 sql,如果 from 中包含子查询仍会执行子查询,将结果放入临时表.")]),t._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("explain extended "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# show warnings 可以得到优化后的查询语句")]),t._v("\nexplain partitions "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 分析使用了分区的表,不常用")]),t._v("\nexplain "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("format")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("tree\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("h3",{attrs:{id:"id"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#id"}},[t._v("#")]),t._v(" ID")]),t._v(" "),e("p",[t._v("查询顺序号,有几个 select 就会显示几行,顺序是按 select 出现顺序增长的, ID 列值越大执行优先级越高越先执行, ID 列相同则从上往下执行, ID 列值为 null 最后执行.")]),t._v(" "),e("h3",{attrs:{id:"select-type"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#select-type"}},[t._v("#")]),t._v(" select_type")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("select_type")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("simple")]),t._v(" "),e("td",[t._v("当前行对应的 select 是简单查询不包含子查询和 union")])]),t._v(" "),e("tr",[e("td",[t._v("primary")]),t._v(" "),e("td",[t._v("当前行对应的 select 是复杂查询中最外层的 select")])]),t._v(" "),e("tr",[e("td",[t._v("subquery")]),t._v(" "),e("td",[t._v("当前行对应的 select 是包含在 select 的子查询")])]),t._v(" "),e("tr",[e("td",[t._v("derived")]),t._v(" "),e("td",[t._v("当前行对应的 select 是包含在 from 子句中的子查询")])]),t._v(" "),e("tr",[e("td",[t._v("union")]),t._v(" "),e("td",[t._v("当前行对应的 select 是在 union 中的第二个和随后的 select")])]),t._v(" "),e("tr",[e("td",[t._v("union result")]),t._v(" "),e("td",[t._v("当前行对应的 select 是从 union 临时表检索结果的 select")])])])]),t._v(" "),e("h3",{attrs:{id:"table"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#table"}},[t._v("#")]),t._v(" table")]),t._v(" "),e("p",[t._v("当查询的 from 子句中有子查询时, table 列是 derivedN 格式,表示当前 select 依赖 ID = N 结果行对应的查询,要先执行 ID = N 的查询.当存在 union 时, union result 的 talbe 列值为 unionN1,N2, N1 和 N2 表示参与 union 的 select 行的 ID 序号.")]),t._v(" "),e("h3",{attrs:{id:"type"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#type"}},[t._v("#")]),t._v(" type")]),t._v(" "),e("p",[t._v("优化器决定怎么查找数据表中当数据,以及查找数据行记录的大概范围.取值表示优化程度的优劣.")]),t._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("null "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" system "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" const "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" eq_ref "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ref "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" range "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" index "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ALL "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 一般情况下保证查询达到 range 级别,最好达到 ref")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("table",[e("thead",[e("tr",[e("th",[t._v("type")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("null")]),t._v(" "),e("td",[t._v("优化过程中就已经可以得到结果,执行阶段就不需要访问表和索引")])]),t._v(" "),e("tr",[e("td",[t._v("sonst")]),t._v(" "),e("td",[t._v("const 出现在主键或唯一索引查询,最多一个匹配行,读取一次")])]),t._v(" "),e("tr",[e("td",[t._v("system")]),t._v(" "),e("td",[t._v("system 是 const 特例表中数据只有一条匹配"),e("code",[t._v("explian extended + show warnings")])])]),t._v(" "),e("tr",[e("td",[t._v("eq_ref")]),t._v(" "),e("td",[t._v("主键或唯一索引被 join 使用,仅次于 const 的连接类型")])]),t._v(" "),e("tr",[e("td",[t._v("ref")]),t._v(" "),e("td",[t._v("使用普通索引或者联合唯一索引的前缀部分索引和某个值相比较可能会找到符合条件的多个数据行")])]),t._v(" "),e("tr",[e("td",[t._v("range")]),t._v(" "),e("td",[t._v("出现在"),e("code",[t._v("in,between,>,<,>=")]),t._v("等操作符中,使用一个索引来查询给定范围的行")])]),t._v(" "),e("tr",[e("td",[t._v("index")]),t._v(" "),e("td",[t._v("扫描全表索引,index 是从索引表中读取的,所有字段都有索引,而 ALL 是从硬盘中读取,比 ALL 要快")])]),t._v(" "),e("tr",[e("td",[t._v("ALL")]),t._v(" "),e("td",[t._v("全表扫描,从头到尾查找所有行,一般需要增加索引来进行查询优化")])])])]),t._v(" "),e("h3",{attrs:{id:"注意"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[t._v("#")]),t._v(" 注意")]),t._v(" "),e("ol",[e("li",[t._v("结果只基于数据表中现有数据")]),t._v(" "),e("li",[t._v("跟 mysql 版本有很大关系,不同版本优化器的优化策略不同")])]),t._v(" "),e("h3",{attrs:{id:"extra"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#extra"}},[t._v("#")]),t._v(" extra")]),t._v(" "),e("p",[t._v("using index : 使用覆盖索引")]),t._v(" "),e("h2",{attrs:{id:"profile-结果"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#profile-结果"}},[t._v("#")]),t._v(" profile 结果")]),t._v(" "),e("h2",{attrs:{id:"processlist-结果"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#processlist-结果"}},[t._v("#")]),t._v(" processlist 结果")]),t._v(" "),e("h2",{attrs:{id:"join"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#join"}},[t._v("#")]),t._v(" join")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("join")]),t._v(" "),e("th",[t._v("结果")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("inner join")]),t._v(" "),e("td",[t._v("select * from a inner join b on a.id = b.aid")])]),t._v(" "),e("tr",[e("td",[t._v("left join")]),t._v(" "),e("td",[t._v("select * from a left join b on a.id = b.aid")])]),t._v(" "),e("tr",[e("td",[t._v("right join")]),t._v(" "),e("td",[t._v("select * from a right join b on a.id = b.aid")])]),t._v(" "),e("tr",[e("td",[t._v("full join")]),t._v(" "),e("td",[t._v("select * from a full join b on a.id = b.aid")])])])]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" b "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("aid "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("is")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("full")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" b "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("aid "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("is")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("or")]),t._v(" b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("is")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("h2",{attrs:{id:"日志"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#日志"}},[t._v("#")]),t._v(" 日志")]),t._v(" "),e("ol",[e("li",[t._v("错误日志 log_error")]),t._v(" "),e("li",[t._v("慢查询日志 slow_query_log=1、slow_query_log_file、long_query_time(默认 10s,0 表示记录所有查询)、log_queries_not_using_indexes(没用到索引会记录)")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("工具")]),t._v(" "),e("th",[t._v("用途")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("mysqldumpslow")]),t._v(" "),e("td",[t._v("慢查询日志分析")])]),t._v(" "),e("tr",[e("td",[t._v("mysqlbinlog")]),t._v(" "),e("td",[t._v("查看 binlog")])]),t._v(" "),e("tr",[e("td",[t._v("pt-query-digest")]),t._v(" "),e("td",[t._v("查看绝大多数日志")])])])]),t._v(" "),e("h2",{attrs:{id:"b-树能存储多少数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#b-树能存储多少数据"}},[t._v("#")]),t._v(" B+树能存储多少数据")]),t._v(" "),e("p",[t._v("叶子节点假设一行数据大小 1K , 一页就能存下 16 条数据,非页节点 ID 为 bigint 长度为 8B, 指针大小 6B,一共 14B,一页可以存储 16K/14 (指针+主键),高度为 3 的 B+ 树能存储大约 2000w 数据.")]),t._v(" "),e("h2",{attrs:{id:"innodb-后台线程分类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#innodb-后台线程分类"}},[t._v("#")]),t._v(" innodb 后台线程分类")]),t._v(" "),e("ol",[e("li",[t._v("master thread : 核心线程,保证数据一致性,将缓存区数据刷新到磁盘")]),t._v(" "),e("li",[t._v("io thread : 负责后台读写操作,接收到的读写请求后进行回调操作 "),e("code",[t._v("show variables like '%io_thread%'")])]),t._v(" "),e("li",[t._v("purge thread : 将页回收等操作从 master 分离出来")]),t._v(" "),e("li",[t._v("page clean thread : 将脏页数据的刷新工作从 master 分离出来")])]),t._v(" "),e("h2",{attrs:{id:"mysql-删除重复"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mysql-删除重复"}},[t._v("#")]),t._v(" mysql 删除重复")]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("字段"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("字段"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" 字段"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("字段"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" 字段"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("字段"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("group")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" 字段"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("字段"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("having")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" b "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" id "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" id "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("min")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("group")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" 字段"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("字段"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("having")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" c "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#解析")]),t._v("\ndelect form "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" 字段 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" id "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" 字段 "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" b\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" id "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" c\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" 字段 "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("group")]),t._v(" 字段 "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("having")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" b\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("min")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("group")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" 字段 "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("having")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" c\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br")])]),e("h2",{attrs:{id:"conf"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#conf"}},[t._v("#")]),t._v(" conf")]),t._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("binlog-format "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# statement (写入sql) row (写入变更) mixed")]),t._v("\nbinlog-do-db "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 需要同步的数据库,默认全部")]),t._v("\nbinlog-ignore-db "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 不需要同步的数据库")]),t._v("\nexpire-logs-days "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 日志保存的天数")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("h2",{attrs:{id:"函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[t._v("#")]),t._v(" 函数")]),t._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("find_in_set"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str, strlist"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# str 要查询的字符串,strlist 以逗号分隔的字符串,用于查找 str 在 strlist 中的位置,返回 1-n 没找到返回 0 , 也可以替代 in find_in_set(id, '1,2,3')")]),t._v("\nconcat "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 字符串拼接,默认逗号")]),t._v("\nconcat_ws "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 可以自定义分隔符")]),t._v("\ngroup_concat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("要连接的字段, 排序字段, 分隔符"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 可以分组的同时把字段以特定分隔符拼接成字符串,该函数有长度限制,默认 1024 字节")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("h2",{attrs:{id:"避免插入重复数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#避免插入重复数据"}},[t._v("#")]),t._v(" 避免插入重复数据")]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("insert")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ignore")]),t._v(" info     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** 前提:插入的数据需要主键或唯一索引.如果数据存在忽略本次插入,如果不存在正常插入 **/")]),t._v("\nonduplicate "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("key")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** 前提:插入数据需要主键或唯一索引.如果数据存在则执行更新操作,如果不存在则直接插入 **/")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("replace")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("into")]),t._v("           "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** 前提:插入数据需要主键或唯一索引.如果存在则先删除再插入,如果不存在则直接插入 **/")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("insert")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("exit")]),t._v("     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** 不需要主键或唯一索引,如果不存在则正常插入,如果存在则忽略 **/")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("h2",{attrs:{id:"utf8"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#utf8"}},[t._v("#")]),t._v(" utf8")]),t._v(" "),e("p",[t._v("在 mysql 中 utf8 编码只支持每个字符 3 个字节,真正的 ut8 每个字符最多 4 个字节, emoji 表情占 4 个字节. mysql 中 utf8mb4 才是真正的 utf8.")]),t._v(" "),e("h2",{attrs:{id:"join-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#join-2"}},[t._v("#")]),t._v(" join")]),t._v(" "),e("p",[t._v("内连接 : 筛选出两张表中都匹配的记录")]),t._v(" "),e("p",[t._v("外连接 : 不仅选出匹配的记录,也会选出不匹配的记录")]),t._v(" "),e("p",[t._v("左外连接 : 筛选出包含左表并且右表没有匹配的记录")]),t._v(" "),e("p",[t._v("右外连接 : 筛选出包含右表记录并且左表没有匹配的记录")]),t._v(" "),e("h2",{attrs:{id:"聚合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#聚合"}},[t._v("#")]),t._v(" 聚合")]),t._v(" "),e("ol",[e("li",[t._v("汇总函数 : sum、count、max、min")]),t._v(" "),e("li",[t._v("group by : 对分类聚合字段进行分组")]),t._v(" "),e("li",[t._v("with : 表示对汇总后的记录再次汇总")]),t._v(" "),e("li",[t._v("having : 表示对分类后结果再进行条件过滤")])]),t._v(" "),e("h2",{attrs:{id:"帮助"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#帮助"}},[t._v("#")]),t._v(" 帮助")]),t._v(" "),e("ol",[e("li",[t._v("? content : 查询所有可供查询的分类")]),t._v(" "),e("li",[t._v("? account management : 查询具体关于权限管理的命令")]),t._v(" "),e("li",[t._v("? DATA types : 查询数据类型")]),t._v(" "),e("li",[t._v("? varchar : varchar 的基本定义")]),t._v(" "),e("li",[t._v("? show : 快速查询")])]),t._v(" "),e("h2",{attrs:{id:"配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[t._v("#")]),t._v(" 配置")]),t._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("max_binlog_size "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置 binlog 文件大小,当文件达到某个值后会生成新的文件")]),t._v("\nsync_binlog "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0 : 不强制刷盘,有系统判断 1 : 每次 commit 时都会将binlog 写入磁盘 N : 每 N 个事务才会写入磁盘")]),t._v("\ninnodb_flush_log_at_trx_commit "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 写入 redo log file 的时机")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0 : 事务提交时不会将 redo log buffer 写入 os buffer,而是每秒写入 os buffer 并调用 fsync 写入 redo log buffer,每秒写入磁盘,系统崩溃丢失 1 秒的数据")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1 : 事务每次提交都会将 redo log buffer 写入 os buffer,并调用 fsync 刷到 redo log file.及时数据崩溃也不会丢失数据.因每次提价都写入磁盘 io 性能较差")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2 : 每次提交写入到 os buffer,然后每秒调用 fsync 将 os buffer 中的日志写入到 redo log file")]),t._v("\nlog_queries_not_using_indexes "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将没有使用到索引的 sql 记录到该文件")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br")])]),e("h2",{attrs:{id:"binlog"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#binlog"}},[t._v("#")]),t._v(" binlog")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("格式")]),t._v(" "),e("th",[t._v("描述")]),t._v(" "),e("th",[t._v("优缺点")]),t._v(" "),e("th",[t._v("默认")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("statment")]),t._v(" "),e("td",[t._v("基于 sql 语句的复制,每一条写 sql 都会记录 binlog")]),t._v(" "),e("td",[t._v("不记录行变化,热值文件小,但是某些情况下主从不一致")]),t._v(" "),e("td",[t._v("5.7.7 前默认")])]),t._v(" "),e("tr",[e("td",[t._v("row")]),t._v(" "),e("td",[t._v("基于行的复制,仅记录哪条记录被修改了")]),t._v(" "),e("td",[t._v("不会出现存储过程、函数、触发器的无法调用不能正确复制")]),t._v(" "),e("td",[t._v("5.7.7 后默认")])]),t._v(" "),e("tr",[e("td",[t._v("mixed")]),t._v(" "),e("td",[t._v("混合模式,一般的复制使用 statment,无法复制的操作会使用 row")]),t._v(" "),e("td"),t._v(" "),e("td")])])]),t._v(" "),e("h2",{attrs:{id:"drop、truncate、delete"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#drop、truncate、delete"}},[t._v("#")]),t._v(" drop、truncate、delete")]),t._v(" "),e("p",[t._v("drop 直接删表,truncate 删除表中数据自增 ID 从 1 开始, delete 删除表中数据可以加 where 语句.")]),t._v(" "),e("ol",[e("li",[t._v("delete 语句是从表中删除行纪录同时作为事务纪录日志保存以便会滚. truncate 一次删除所有数据不记录日志不能恢复,不会激活触发器,delete 执行时会触发触发器.delte 删除只是标记为已删除,并不会释放磁盘空间.删除全部数据时 mysim 会立即释放磁盘空间,innodb 不会.带条件删除都不会释放空间.执行 optimize table 会释放磁盘空间.一行一行删除数据,会记录 redo 和 undo,会成大量日志占用磁盘空间.")]),t._v(" "),e("li",[t._v("trancate 后表和索引空间大小会恢复初始大小,delete 不会减少存储空间.drop 语句将表占用空间全部释放")]),t._v(" "),e("li",[t._v("trancate 只针对 table, delete 可以是 talbe 和 view")])]),t._v(" "),e("h3",{attrs:{id:"delete"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#delete"}},[t._v("#")]),t._v(" delete")]),t._v(" "),e("h3",{attrs:{id:"truncate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#truncate"}},[t._v("#")]),t._v(" truncate")]),t._v(" "),e("ol",[e("li",[t._v("属于 DDL 语言,不走事务,不会触发触发器,执行后数据无法找回.")]),t._v(" "),e("li",[t._v("执行后立即释放磁盘空间")]),t._v(" "),e("li",[t._v("重置 auto_increment, 对于 innodb delete 整个表后重启 mysql 会重置 1,这个值是保存在内存中的")])]),t._v(" "),e("h3",{attrs:{id:"drop"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#drop"}},[t._v("#")]),t._v(" drop")]),t._v(" "),e("ol",[e("li",[t._v("属于 DDL,所有数据删除")])]),t._v(" "),e("h2",{attrs:{id:"死锁-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#死锁-2"}},[t._v("#")]),t._v(" 死锁")]),t._v(" "),e("p",[t._v("两个或多个事务在同一个资源上相互占用,并请求锁定对方的资源导致恶性循环.")]),t._v(" "),e("ol",[e("li",[t._v("控制访问顺序")]),t._v(" "),e("li",[t._v("同一个事务中尽可能一次锁定需要的资源")]),t._v(" "),e("li",[t._v("升级锁定力度,行锁升级表锁")])]),t._v(" "),e("h2",{attrs:{id:"为什么使用-b"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么使用-b"}},[t._v("#")]),t._v(" 为什么使用 B+")]),t._v(" "),e("ol",[e("li",[t._v("b 数只适合随机检索,而 b+ 同时支持随机检索和顺序检索")]),t._v(" "),e("li",[t._v("b+ 空间利用率高,减少 io 次数,磁盘读写代价低")]),t._v(" "),e("li",[t._v("b+ 查询效率稳定, b 树靠近根节点查询时间短, b+ 树任何关键字查询必须从根节点到叶子节点")]),t._v(" "),e("li",[t._v("b+ 叶子节点使用指针顺序连接在一起,只要遍历叶子节点就可以实现叶子遍历,频繁的范围查询 b 树不支持")]),t._v(" "),e("li",[t._v("增删节点时 b+ 树叶子节点包含所有关键字并以有序链表存储,提高增删效率")])]),t._v(" "),e("h2",{attrs:{id:"hash-jion"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hash-jion"}},[t._v("#")]),t._v(" hash jion")]),t._v(" "),e("p",[t._v("8.0 新特性")]),t._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("optimizer_switch 中 "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("hash_join")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("on "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 默认 on")]),t._v("\njoin_buffer_size "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 允许使用的内存数量,超过该值回在次盘中执行,如果无法在内存中完成,并且打开的文件数量超过系统变量 open_file_limit 的值,连接操作可能会失败")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("h2",{attrs:{id:"事务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事务"}},[t._v("#")]),t._v(" 事务")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("特性")]),t._v(" "),e("th",[t._v("实现")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("原子性")]),t._v(" "),e("td",[t._v("undo log")])]),t._v(" "),e("tr",[e("td",[t._v("一致性")]),t._v(" "),e("td",[t._v("代码")])]),t._v(" "),e("tr",[e("td",[t._v("隔离性")]),t._v(" "),e("td",[t._v("MVCC")])]),t._v(" "),e("tr",[e("td",[t._v("持久性")]),t._v(" "),e("td",[t._v("redo log")])])])]),t._v(" "),e("h3",{attrs:{id:"mvcc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvcc"}},[t._v("#")]),t._v(" MVCC")]),t._v(" "),e("p",[t._v("查重创建版本小于或等于当前事务版本,删除版本为空或大于当前事务版本的行记录.")]),t._v(" "),e("h2",{attrs:{id:"自增-id-耗尽"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自增-id-耗尽"}},[t._v("#")]),t._v(" 自增 ID 耗尽")]),t._v(" "),e("p",[t._v("一般 int unsigned 的最大是 2 的 32 次幂 -1,如果到达最大值时插入时使用的自增 ID 仍是该最大值,报主键冲突错误.此时建议升级 bigint unsigned.如果没有自增 ID,innodb 会自动创建一个不可见的、长度 6 字节的 row_id.代码实现上使用的是 bigint unsigned.如果 row_id 到达最大值,此时再 +1, row_id 低 48 位都为 0,在插入新数据时拿到的 row_id 就为 0,存在主键冲突的可能.为了避免隐患,每个表都建议定一个主键.")]),t._v(" "),e("h2",{attrs:{id:"一次请求过程-集群"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一次请求过程-集群"}},[t._v("#")]),t._v(" 一次请求过程(集群)")]),t._v(" "),e("h2",{attrs:{id:"查找时区分大小写"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查找时区分大小写"}},[t._v("#")]),t._v(" 查找时区分大小写")]),t._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("collate")]),t._v(" utf8_bin "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("like")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** 需要字符集 utf8 **/")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("collate")]),t._v(" utf8mb4_bin "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("like")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v(" 创建字段时添加 "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("binary")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("like")]),t._v(" 后增加 "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("binary")]),t._v(" 即可\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" 关键字后增加 "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("binary")]),t._v(" 字段"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("以二进制方式查找\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("h2",{attrs:{id:"主从延迟"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主从延迟"}},[t._v("#")]),t._v(" 主从延迟")]),t._v(" "),e("h3",{attrs:{id:"原因"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原因"}},[t._v("#")]),t._v(" 原因")]),t._v(" "),e("ol",[e("li",[t._v("随机写盘 : binlog 和 relaylog 的写入都是顺序写盘,网络传输内网传输,不会有太大延迟,但是 sql 线程读取 relay log 的执行是随机写盘")]),t._v(" "),e("li",[t._v("主库并发高 : 从库 sql 线程执行较慢")]),t._v(" "),e("li",[t._v("锁等待 : sql 单线程遇到锁时就会等待,直到执行成功,如果某一时刻从库因为查询产生锁等待,只有当前执行完才会进行下面操作,产生主从延迟")])]),t._v(" "),e("h3",{attrs:{id:"解决方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解决方法"}},[t._v("#")]),t._v(" 解决方法")]),t._v(" "),e("ol",[e("li",[t._v("并行复制 : 5.6 版本后提供了并行复制,通过将 sql 线程转换成多个 work 线程来进行重放")]),t._v(" "),e("li",[t._v("主库控制并发 : 多用缓存")]),t._v(" "),e("li",[t._v("读主库 : 对于实时性比较高的数据直接读主库")])]),t._v(" "),e("h2",{attrs:{id:"一条-sql-执行过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一条-sql-执行过程"}},[t._v("#")]),t._v(" 一条 sql 执行过程")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("sql 驱动建立 tcp 连接")])]),t._v(" "),e("li",[e("p",[t._v("数据库连接池(应用服务和 mysql 架构体系中都提供连接池) : 维护一定数量的连接数,节省不断传家与销毁造成的开销,(理论上是一个请求建立连接用完销毁)")])]),t._v(" "),e("li",[e("p",[t._v("mysql 处理请求的线程获取请求后获取 sql 语句交给 sql 接口处理")])]),t._v(" "),e("li",[e("p",[t._v("查询解析器 : 将 sql 接口传过来的 sql 语句进行解析,")])]),t._v(" "),e("li",[e("p",[t._v("查询优化器 : 依据成本最小原则选择对应的索引(io 成本和 cpu 成本),优化器选出最优索引后调用存储引擎接口,执行被解析和优化过的 sql 语句")]),t._v(" "),e("ol",[e("li",[t._v("io 成本 : 将数据加载到内存的成本")]),t._v(" "),e("li",[t._v("cpu 成本 : 将数据读取到内存后,检测数据是否满足条件和排序等操作")])])]),t._v(" "),e("li",[e("p",[t._v("执行器 : 执行器根据执行计划调用存储引擎接口去完成 sql 执行,真正执行 sql 动作是在存储引擎中完成的")])]),t._v(" "),e("li",[e("p",[t._v("buffer pool (区别 redo log buffer) : sql 语句对应的数据要么在内存要么在磁盘,如果在磁盘执行效率慢,所以 innodb 引入 buffer pool")])]),t._v(" "),e("li",[e("p",[t._v("mysql 会先去 buffer pool 中查找数据,没找到会去磁盘中找,找到后将数据加载到 buffer pool,同时将数据原始记录保存到 undo log 中")])]),t._v(" "),e("li",[e("p",[t._v("innodb 会在 buffer pool 中执行更新操作,更新后的数据会记录在 redo log buffer 中")])]),t._v(" "),e("li",[e("p",[t._v("事务提交 : 将 redo log buffer 中的数据持久化到磁盘, 即将 redo log buffer 中数据写入 redo log.(一般情况下立即写入磁盘"),e("code",[t._v("innodb_flush_log_at_trx_commit")]),t._v(")")]),t._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("innodb_flush_log_at_trx_commit "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0 不刷入磁盘 1 立即刷入磁盘 2 先刷到 os cache")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])])]),t._v(" "),e("li",[e("p",[t._v("binlog : "),e("code",[t._v("sync_bin_log")]),t._v(",0 表示先写入 os cache,提价事务时数据不会立即写入磁盘, 1 表示直接写入磁盘文件")])]),t._v(" "),e("li",[e("p",[t._v("mysql 在提交事务的时候完成以下三个动作才表示本次事务被成功提交了")]),t._v(" "),e("ol",[e("li",[t._v("将 redo log buffer 写入到 redo log 文件")]),t._v(" "),e("li",[t._v("同时将本次修改数据写入到 binlog")]),t._v(" "),e("li",[t._v("同时将本次修改的 binlog 文件名和内容在文件中的位置记录到 redo log 中,最后还会在 redo log 中写入 commit 标记")])])]),t._v(" "),e("li",[e("p",[t._v("后台线程 : 将 buffer pool 中的数据刷入到磁盘")])])]),t._v(" "),e("h2",{attrs:{id:"binlog-redolog"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#binlog-redolog"}},[t._v("#")]),t._v(" binlog && redolog")]),t._v(" "),e("ol",[e("li",[t._v("文件大小 : redo log 配置固定大小, bin log 通过配置 max_bin、log_size 设置")]),t._v(" "),e("li",[t._v("实现方式 : redo log innodb 引擎实现, bin log mysql 层实现")]),t._v(" "),e("li",[t._v("记录方式 : redo log 采用循环写入方式记录,回到结尾时会回到开头循环写, bin log 追加到达到固定值后生成新文件")]),t._v(" "),e("li",[t._v("使用场景 : redo log 适用崩溃恢复, bin log 适用主从复制和数据恢复")])]),t._v(" "),e("h2",{attrs:{id:"order-by-limit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#order-by-limit"}},[t._v("#")]),t._v(" order by & limit")]),t._v(" "),e("p",[t._v("当 order by 和 limit 同时使用时 order by 有相同的列值时会随机返回,要想保证返回顺序需要 order by 增加随机列,可以保证返回的顺序.")]),t._v(" "),e("p",[t._v("dao: 像访问对象一样访问数据")]),t._v(" "),e("p",[t._v("orm: 简化数据查询过程")]),t._v(" "),e("h2",{attrs:{id:"主从不一致"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主从不一致"}},[t._v("#")]),t._v(" 主从不一致")]),t._v(" "),e("ol",[e("li",[t._v("忽略")]),t._v(" "),e("li",[t._v("强制读主")]),t._v(" "),e("li",[t._v("借助缓存,选择读主")])]),t._v(" "),e("h2",{attrs:{id:"主主不一致"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主主不一致"}},[t._v("#")]),t._v(" 主主不一致")]),t._v(" "),e("ol",[e("li",[t._v("不同初始值,相同步长")]),t._v(" "),e("li",[t._v("应用层生成 ID")])]),t._v(" "),e("h2",{attrs:{id:"myisam-和-innodb-区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#myisam-和-innodb-区别"}},[t._v("#")]),t._v(" myisam 和 innodb 区别")]),t._v(" "),e("ol",[e("li",[t._v("myisam : 不支持事务、行锁、外键,一般用于大量查询少量插入场景,索引和数据分开存储")]),t._v(" "),e("li",[t._v("innodb: 基于聚蔟索引建立,支持事务、行锁、外键,通过 MVCC 来支持高并发,索引和数据存储在一起")])]),t._v(" "),e("blockquote",[e("p",[t._v("聚蔟索引 : 节点只包含 id 索引,叶子节点包含索引和数据,这种索引和数据一起存储的方式就是聚蔟索引.")])]),t._v(" "),e("p",[t._v("要确定一个查询是否是覆盖索引只需要 explain 语句看 extra 结果是否是 using index.")]),t._v(" "),e("h2",{attrs:{id:"锁类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#锁类型"}},[t._v("#")]),t._v(" 锁类型")]),t._v(" "),e("p",[t._v("分为共享锁和排它锁,也叫读锁和写锁.读锁是共享的,通过 lock in share mode 实现,只能读不能写.写锁是排它的,会阻塞其它的写锁和读锁.")]),t._v(" "),e("p",[t._v("从颗粒读来说分表锁和航锁.表锁会锁定整张表,阻塞其它用户对该表的所有读写操作,alter 修改表结构时会锁表.行锁又分乐观锁和悲观锁,悲观锁可以通过 for update 实现,乐观锁则通过版本号实现.")]),t._v(" "),e("h2",{attrs:{id:"acid"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#acid"}},[t._v("#")]),t._v(" ACID")]),t._v(" "),e("ol",[e("li",[t._v("原子性 : 一个事务中所有操作要么全部成功,要么全部失败,通过 undo log 日志保证,记录了要会滚数据的日志信息,事务回滚时撤销已经执行成功的 sql")]),t._v(" "),e("li",[t._v("一致性 : 总是从一个一致状态转换到另一个一致状态,代码层保证")]),t._v(" "),e("li",[t._v("隔离性 : 一个事务的修改在最终提交前对其它事务是不可见的, MVCC 来保证隔离性")]),t._v(" "),e("li",[t._v("持久性 : 一个事务一旦提交,所有修改就会永久保存到数据库中, 内存 + redo log 来保证,修改数据的同时在内存和 redo log 中记录这次操作,事务提交时通过 redo log 刷盘,宕机时从 redo log 恢复")])]),t._v(" "),e("h2",{attrs:{id:"隔离级别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#隔离级别"}},[t._v("#")]),t._v(" 隔离级别")]),t._v(" "),e("ol",[e("li",[t._v("读未提交 : 可能会读到其它事务未提交数据,即脏读")]),t._v(" "),e("li",[t._v("读已提交 : 两次读取结果不一致,即不可重复读")]),t._v(" "),e("li",[t._v("重复读 : 默认级别,每次读取结果不一样,但是可能产生幻读")]),t._v(" "),e("li",[t._v("串行化 : 一般不会使用,会给每一行读取的数据加锁会导致大量超时和锁竞争")])]),t._v(" "),e("h2",{attrs:{id:"mvcc-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvcc-2"}},[t._v("#")]),t._v(" MVCC")]),t._v(" "),e("ul",[e("li",[t._v("trx_id : 事务 id")]),t._v(" "),e("li",[t._v("roll_pointer : 指向 undo_log 中上一个版本的指针")])]),t._v(" "),e("p",[t._v("多版本并发控制,保存数据在某个时间节点的快照.实际上每行数据包含隐藏的两列,创建时间版本号和过期(删除)时间版本号,每开启一个新的事务版本号都会自动递增.MVCC 原理是查找创建版本小于或等于当前事务版本,删除版本为空或大于当前事务版本的数据.")]),t._v(" "),e("h3",{attrs:{id:"readview"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#readview"}},[t._v("#")]),t._v(" ReadView")]),t._v(" "),e("ul",[e("li",[t._v("m_ids : 还没有提交的事务 id")]),t._v(" "),e("li",[t._v("min_trx_id : m_ids 中最小的")]),t._v(" "),e("li",[t._v("max_trx_id : 下一个要生成的事务 id")]),t._v(" "),e("li",[t._v("creator_trx_id : 生成该 ReadView 的事务 idx")])]),t._v(" "),e("p",[t._v("比较:")]),t._v(" "),e("ul",[e("li",[t._v("一个事务职能读取到事务 id 小于自己的数据")]),t._v(" "),e("li",[t._v("RC 隔离级别下,一个事务每次发起查询都会生成一个 ReadView")]),t._v(" "),e("li",[t._v("RR 隔离级别下,ReadView 只会生成一次")])]),t._v(" "),e("h2",{attrs:{id:"间隙锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#间隙锁"}},[t._v("#")]),t._v(" 间隙锁")]),t._v(" "),e("p",[t._v("是可重复读级别下才会有的锁,结合 MVCC 和间隙锁可以解决幻读问题.唯一索引是不会有间隙索引的.mysql 会自动生成区间(左开右闭)")]),t._v(" "),e("h2",{attrs:{id:"分库分表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分库分表"}},[t._v("#")]),t._v(" 分库分表")]),t._v(" "),e("ol",[e("li",[t._v("垂直分库 : 微服务拆分,做到垂直拆分")]),t._v(" "),e("li",[t._v("垂直分表 : 表字段过多,将不常用,数据大的做拆分.如订单")])]),t._v(" "),e("h2",{attrs:{id:"分表后唯一-id-唯一性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分表后唯一-id-唯一性"}},[t._v("#")]),t._v(" 分表后唯一 id 唯一性")]),t._v(" "),e("ol",[e("li",[t._v("设定步长")]),t._v(" "),e("li",[t._v("分布式 ID")]),t._v(" "),e("li",[t._v("不使用主键,比如订单号")])]),t._v(" "),e("h2",{attrs:{id:"主从同步"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主从同步"}},[t._v("#")]),t._v(" 主从同步")]),t._v(" "),e("p",[t._v("默认复制方式是异步的,主库把日志发送给从库后不关心从库是否已经处理,假设主库挂了,从库处理失败了,这时从库升级为主库,日志就丢了.")]),t._v(" "),e("p",[e("img",{attrs:{src:a(502),alt:"mysql主从同步"}})]),t._v(" "),e("h3",{attrs:{id:"全同步复制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#全同步复制"}},[t._v("#")]),t._v(" 全同步复制")]),t._v(" "),e("p",[t._v("主库写 binlog 后强制同步日志到从库,所有的从库都执行完成后返回给客户端,显然会影响性能.")]),t._v(" "),e("h3",{attrs:{id:"半同步复制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#半同步复制"}},[t._v("#")]),t._v(" 半同步复制")]),t._v(" "),e("p",[t._v("从库写入 binlog 成功后返回 ack 给主库,主库收到至少一个从库的确认就认为写操作成功.")]),t._v(" "),e("h3",{attrs:{id:"组复制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组复制"}},[t._v("#")]),t._v(" 组复制")]),t._v(" "),e("p",[t._v("mgr : mysql group replication")]),t._v(" "),e("ol",[e("li",[t._v("分组内的成员对等关系,每个节点都可以写入")]),t._v(" "),e("li",[t._v("增加了一个协商共识的认证环节,多数节点达成一致事务才能提交")])]),t._v(" "),e("h2",{attrs:{id:"主从延迟-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主从延迟-2"}},[t._v("#")]),t._v(" 主从延迟")]),t._v(" "),e("ol",[e("li",[t._v("特定业务场景读写请求强制主库")]),t._v(" "),e("li",[t._v("读请求走从库,如果没有数据,去主库做二次查询")])]),t._v(" "),e("h2",{attrs:{id:"隔离级别-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#隔离级别-2"}},[t._v("#")]),t._v(" 隔离级别")]),t._v(" "),e("ol",[e("li",[t._v("读未提交 : select 不加锁,可能出现脏读")]),t._v(" "),e("li",[t._v("读已提交 : 普通 select 快照读(即 MVCC),select(in share mode、for update)/update/delete 会使用记录锁(使用了唯一索引)可能出现不可重复读")]),t._v(" "),e("li",[t._v("可重复读 : 普通 select 快照读(即 MVCC),select(in share mode、for update)/update/delete 根据查询条件会选择记录锁(使用了唯一索引),或者间隙锁和临键锁(范围查询),防止幻读")]),t._v(" "),e("li",[t._v("串行化 : select 隐式转化为 select ... in share mode,会和 update、delete 互斥")])]),t._v(" "),e("h2",{attrs:{id:"索引下推"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#索引下推"}},[t._v("#")]),t._v(" 索引下推")]),t._v(" "),e("p",[t._v("只有符合条件的才进行回表,对索引中包含的字段先进行判断,不符合条件的跳过,减少不必要的回表操作.先过滤掉不符合条件的再去回表而不是所有的都回表后再比较.")]),t._v(" "),e("h2",{attrs:{id:"空洞"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#空洞"}},[t._v("#")]),t._v(" 空洞")]),t._v(" "),e("p",[t._v("delete 命令只是把数据页或记录位置标记为可复用,表空间并没有回收,该现象称之为空洞.如果插入的数据是随机的非主键有序可能造成数据页分裂.如果插入按照索引递增顺序插入,索引是紧凑的不会出现数据页分裂.如果修改的是非索引值不会影响 b+树结构,如果修改的内容包含索引,是先删除一个旧值,再插入一个新值,可能会造成空洞.")]),t._v(" "),e("h2",{attrs:{id:"online-ddl"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#online-ddl"}},[t._v("#")]),t._v(" online ddl")]),t._v(" "),e("ol",[e("li",[t._v("新建临时文件")]),t._v(" "),e("li",[t._v("扫描表主键的所有数据页生成 B+ 树,存储到临时文件")]),t._v(" "),e("li",[t._v("在生成临时文件过程中如果有对表做写操作,操作会记录到一个日志文件中")]),t._v(" "),e("li",[t._v("当临时文件生成后,重放日志文件将操作应用到日志文件")]),t._v(" "),e("li",[t._v("用临时文件替换表的数据文件")]),t._v(" "),e("li",[t._v("删除旧表数据文件")])]),t._v(" "),e("blockquote",[e("p",[t._v("与新建表区别 : 增加了日志文件记录和重放功能,迁移过程中允许对表进行增删改操作.")])]),t._v(" "),e("h2",{attrs:{id:"sql-执行过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sql-执行过程"}},[t._v("#")]),t._v(" sql 执行过程")]),t._v(" "),e("p",[e("img",{attrs:{src:a(503),alt:"mysql-zhixingguocheng"}})]),t._v(" "),e("p",[t._v("一张表最多可以创建 64 个非聚蔟索引,创建非聚蔟索引的列不能超过 16 个.")]),t._v(" "),e("h2",{attrs:{id:"count-1-count-count-字段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#count-1-count-count-字段"}},[t._v("#")]),t._v(" count(1) & count(*) & count(字段)")]),t._v(" "),e("ul",[e("li",[t._v("count(1) 会统计所有记录,count(字段) 不统计为 null 的记录,空字符串和 0 还会统计")]),t._v(" "),e("li",[t._v("count(*) 相当于行数,会自动选择索引,不会忽略为 null 的值")]),t._v(" "),e("li",[t._v("count(1) 忽略所有列,用 1 代表行,走聚集索引")])]),t._v(" "),e("h2",{attrs:{id:"日志-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#日志-2"}},[t._v("#")]),t._v(" 日志")]),t._v(" "),e("ol",[e("li",[t._v("binlog : server 层日志")]),t._v(" "),e("li",[t._v("redo log、undo log : 存储层日志")]),t._v(" "),e("li",[t._v("slow_query_log : 慢查询日志")])]),t._v(" "),e("h3",{attrs:{id:"主从同步策略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主从同步策略"}},[t._v("#")]),t._v(" 主从同步策略")]),t._v(" "),e("ul",[e("li",[t._v("同步 : master 会等所有 slave 都回应后才提交")]),t._v(" "),e("li",[t._v("半同步 : 至少一个 slave 回应就提交")]),t._v(" "),e("li",[t._v("异步 : 不等 slave 回应就提交")]),t._v(" "),e("li",[t._v("延迟 : slave 要落后于 master 指定的时间")])]),t._v(" "),e("h2",{attrs:{id:"ip-存储"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ip-存储"}},[t._v("#")]),t._v(" ip 存储")]),t._v(" "),e("p",[t._v("当存储 ipv4 时使用 32 位无符号整数,而不是字符串.ipv6 使用 varbinary.")]),t._v(" "),e("ul",[e("li",[t._v("ipv4 相关函数 : "),e("code",[t._v("INET_ATON")]),t._v("、"),e("code",[t._v("INET_NTOA")])]),t._v(" "),e("li",[t._v("ipv6 相关函数 : "),e("code",[t._v("INET6_ATON")]),t._v("、"),e("code",[t._v("INET6_NTOA")])])]),t._v(" "),e("h2",{attrs:{id:"sql-safe-updates"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sql-safe-updates"}},[t._v("#")]),t._v(" sql_safe_updates")]),t._v(" "),e("p",[t._v("innodb 如果不走索引,全表扫描会锁全表,即全表加 next-lock.可以预防 update 中 where 没有索引锁全表.如果可能会被优化器选择全表可以使用 force index.")]),t._v(" "),e("p",[t._v("设置 sql_safe_updates = 1")]),t._v(" "),e("p",[t._v("update 必须满足如下条件之一才能执行成功.")]),t._v(" "),e("ul",[e("li",[t._v("使用 where,并且 where 条件中必须有索引列")]),t._v(" "),e("li",[t._v("使用 limit")]),t._v(" "),e("li",[t._v("同时使用 where 和 limit,where 中可以没有索引列")])]),t._v(" "),e("p",[t._v("delete 必须满足如下条件之一才能执行成功.")]),t._v(" "),e("ul",[e("li",[t._v("使用 where,并且 where 中必须有索引列")]),t._v(" "),e("li",[t._v("同时使用 where 和 limit ,where 可以没有索引列")])]),t._v(" "),e("h2",{attrs:{id:"innodb"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#innodb"}},[t._v("#")]),t._v(" innodb")]),t._v(" "),e("p",[e("img",{attrs:{src:a(504),alt:"innodb B+树"}}),t._v(" "),e("img",{attrs:{src:"image/innodb-yemulu.png",alt:"innodb 页目录"}}),t._v(" "),e("img",{attrs:{src:a(505),alt:"innodb 页"}}),t._v(" "),e("img",{attrs:{src:a(506),alt:"innodb 页"}}),t._v(" "),e("img",{attrs:{src:a(507),alt:"innodb 页"}})]),t._v(" "),e("h2",{attrs:{id:"小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),e("ul",[e("li",[t._v("mysiam 可以没有主键 : 主键索引和普通索引没区别,innodb 需要主键索引所以有主键,row_id.")]),t._v(" "),e("li",[t._v("数据库的 io 操作最小单位是页,innodb 数据默认大小 16k")])])])}),[],!1,null,null,null);s.default=r.exports}}]);