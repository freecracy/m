(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{531:function(s,t,a){"use strict";a.r(t);var n=a(20),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"_0x03-内存模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0x03-内存模型"}},[s._v("#")]),s._v(" 0x03.内存模型")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" mcache "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// The following members are accessed on every malloc,")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// so they are grouped here for better caching.")]),s._v("\n\tnext_sample "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// trigger heap sample after allocating this many bytes")]),s._v("\n\tlocal_scan  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// bytes of scannable heap allocated")]),s._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Allocator cache for tiny objects w/o pointers.")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// See "Tiny allocator" comment in malloc.go.')]),s._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// tiny points to the beginning of the current tiny block, or")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// nil if there is no current tiny block.")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// tiny is a heap pointer. Since mcache is in non-GC'd memory,")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// we handle it by clearing it in releaseAll during mark")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// termination.")]),s._v("\n\ttiny             "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v("\n\ttinyoffset       "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v("\n\tlocal_tinyallocs "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// number of tiny allocs not counted in other stats")]),s._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// The rest is not accessed on every malloc.")]),s._v("\n\n\talloc "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("numSpanClasses"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("mspan "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// spans to allocate from, indexed by spanClass")]),s._v("\n\n\tstackcache "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("_NumStackOrders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("stackfreelist\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Local allocator stats, flushed during GC.")]),s._v("\n\tlocal_largefree  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v("                  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// bytes freed for large objects (>maxsmallsize)")]),s._v("\n\tlocal_nlargefree "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v("                  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// number of frees for large objects (>maxsmallsize)")]),s._v("\n\tlocal_nsmallfree "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("_NumSizeClasses"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// number of frees for small objects (<=maxsmallsize)")]),s._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// flushGen indicates the sweepgen during which this mcache")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// was last flushed. If flushGen != mheap_.sweepgen, the spans")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// in this mcache are stale and need to the flushed so they")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// can be swept. This is done in acquirep.")]),s._v("\n\tflushGen "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint32")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br")])]),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" mheap "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// lock must only be acquired on the system stack, otherwise a g")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// could self-deadlock if its stack grows with the lock held.")]),s._v("\n\tlock      mutex\n\tfree      mTreap "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// free spans")]),s._v("\n\tsweepgen  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint32")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// sweep generation, see comment in mspan")]),s._v("\n\tsweepdone "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint32")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// all spans are swept")]),s._v("\n\tsweepers  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint32")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// number of active sweepone calls")]),s._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// allspans is a slice of all mspans ever created. Each mspan")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// appears exactly once.")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// The memory for allspans is manually managed and can be")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// reallocated and move as the heap grows.")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// In general, allspans is protected by mheap_.lock, which")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// prevents concurrent access as well as freeing the backing")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// store. Accesses during STW might not hold the lock, but")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// must ensure that allocation cannot happen around the")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// access (since that may free the backing store).")]),s._v("\n\tallspans "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("mspan "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// all spans out there")]),s._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// sweepSpans contains two mspan stacks: one of swept in-use")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// spans, and one of unswept in-use spans. These two trade")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// roles on each GC cycle. Since the sweepgen increases by 2")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// on each cycle, this means the swept spans are in")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// sweepSpans[sweepgen/2%2] and the unswept spans are in")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// sweepSpans[1-sweepgen/2%2]. Sweeping pops spans from the")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// unswept stack and pushes spans that are still in-use on the")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// swept stack. Likewise, allocating an in-use span pushes it")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// on the swept stack.")]),s._v("\n\tsweepSpans "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("gcSweepBuf\n\n\t"),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("_")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint32")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// align uint64 fields on 32-bit for atomics")]),s._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Proportional sweep")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// These parameters represent a linear function from heap_live")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// to page sweep count. The proportional sweep system works to")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// stay in the black by keeping the current page sweep count")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// above this line at the current heap_live.")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// The line has slope sweepPagesPerByte and passes through a")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// basis point at (sweepHeapLiveBasis, pagesSweptBasis). At")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// any given time, the system is at (memstats.heap_live,")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// pagesSwept) in this space.")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// It's important that the line pass through a point we")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// control rather than simply starting at a (0,0) origin")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// because that lets us adjust sweep pacing at any time while")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// accounting for current progress. If we could only adjust")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// the slope, it would create a discontinuity in debt if any")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// progress has already been made.")]),s._v("\n\tpagesInUse         "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint64")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// pages of spans in stats mSpanInUse; R/W with mheap.lock")]),s._v("\n\tpagesSwept         "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint64")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// pages swept this cycle; updated atomically")]),s._v("\n\tpagesSweptBasis    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint64")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// pagesSwept to use as the origin of the sweep ratio; updated atomically")]),s._v("\n\tsweepHeapLiveBasis "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint64")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// value of heap_live to use as the origin of sweep ratio; written with lock, read without")]),s._v("\n\tsweepPagesPerByte  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("float64")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// proportional sweep ratio; written with lock, read without")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// TODO(austin): pagesInUse should be a uintptr, but the 386")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// compiler can't 8-byte align fields.")]),s._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Scavenger pacing parameters")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// The two basis parameters and the scavenge ratio parallel the proportional")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// sweeping implementation, the primary differences being that:")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//  * Scavenging concerns itself with RSS, estimated as heapRetained()")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//  * Rather than pacing the scavenger to the GC, it is paced to a")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//    time-based rate computed in gcPaceScavenger.")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// scavengeRetainedGoal represents our goal RSS.")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// All fields must be accessed with lock.")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// TODO(mknyszek): Consider abstracting the basis fields and the scavenge ratio")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// into its own type so that this logic may be shared with proportional sweeping.")]),s._v("\n\tscavengeTimeBasis     "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int64")]),s._v("\n\tscavengeRetainedBasis "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint64")]),s._v("\n\tscavengeBytesPerNS    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("float64")]),s._v("\n\tscavengeRetainedGoal  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint64")]),s._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Page reclaimer state")]),s._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// reclaimIndex is the page index in allArenas of next page to")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// reclaim. Specifically, it refers to page (i %")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// pagesPerArena) of arena allArenas[i / pagesPerArena].")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// If this is >= 1<<63, the page reclaimer is done scanning")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// the page marks.")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// This is accessed atomically.")]),s._v("\n\treclaimIndex "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint64")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// reclaimCredit is spare credit for extra pages swept. Since")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// the page reclaimer works in large chunks, it may reclaim")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// more than requested. Any spare pages released go to this")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// credit pool.")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// This is accessed atomically.")]),s._v("\n\treclaimCredit "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Malloc stats.")]),s._v("\n\tlargealloc  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint64")]),s._v("                  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// bytes allocated for large objects")]),s._v("\n\tnlargealloc "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint64")]),s._v("                  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// number of large object allocations")]),s._v("\n\tlargefree   "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint64")]),s._v("                  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// bytes freed for large objects (>maxsmallsize)")]),s._v("\n\tnlargefree  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint64")]),s._v("                  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// number of frees for large objects (>maxsmallsize)")]),s._v("\n\tnsmallfree  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("_NumSizeClasses"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint64")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// number of frees for small objects (<=maxsmallsize)")]),s._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// arenas is the heap arena map. It points to the metadata for")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// the heap for every arena frame of the entire usable virtual")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// address space.")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Use arenaIndex to compute indexes into this array.")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// For regions of the address space that are not backed by the")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Go heap, the arena map contains nil.")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Modifications are protected by mheap_.lock. Reads can be")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// performed without locking; however, a given entry can")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// transition from nil to non-nil at any time when the lock")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// isn't held. (Entries never transitions back to nil.)")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// In general, this is a two-level mapping consisting of an L1")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// map and possibly many L2 maps. This saves space when there")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// are a huge number of arena frames. However, on many")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// platforms (even 64-bit), arenaL1Bits is 0, making this")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// effectively a single-level map. In this case, arenas[0]")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// will never be nil.")]),s._v("\n\tarenas "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" arenaL1Bits"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" arenaL2Bits"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("heapArena\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// heapArenaAlloc is pre-reserved space for allocating heapArena")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// objects. This is only used on 32-bit, where we pre-reserve")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// this space to avoid interleaving it with the heap itself.")]),s._v("\n\theapArenaAlloc linearAlloc\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// arenaHints is a list of addresses at which to attempt to")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// add more heap arenas. This is initially populated with a")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// set of general hint addresses, and grown with the bounds of")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// actual heap arena ranges.")]),s._v("\n\tarenaHints "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("arenaHint\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// arena is a pre-reserved space for allocating heap arenas")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// (the actual arenas). This is only used on 32-bit.")]),s._v("\n\tarena linearAlloc\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// allArenas is the arenaIndex of every mapped arena. This can")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// be used to iterate through the address space.")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Access is protected by mheap_.lock. However, since this is")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// append-only and old backing arrays are never freed, it is")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// safe to acquire mheap_.lock, copy the slice header, and")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// then release mheap_.lock.")]),s._v("\n\tallArenas "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("arenaIdx\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// sweepArenas is a snapshot of allArenas taken at the")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// beginning of the sweep cycle. This can be read safely by")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// simply blocking GC (by disabling preemption).")]),s._v("\n\tsweepArenas "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("arenaIdx\n\n\t"),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("_")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint32")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ensure 64-bit alignment of central")]),s._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// central free lists for small size classes.")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// the padding makes sure that the mcentrals are")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// spaced CacheLinePadSize bytes apart, so that each mcentral.lock")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// gets its own cache line.")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// central is indexed by spanClass.")]),s._v("\n\tcentral "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("numSpanClasses"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\tmcentral mcentral\n\t\tpad      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("cpu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("CacheLinePadSize "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" unsafe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mcentral"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v("cpu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("CacheLinePadSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("byte")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n\tspanalloc             fixalloc "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// allocator for span*")]),s._v("\n\tcachealloc            fixalloc "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// allocator for mcache*")]),s._v("\n\ttreapalloc            fixalloc "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// allocator for treapNodes*")]),s._v("\n\tspecialfinalizeralloc fixalloc "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// allocator for specialfinalizer*")]),s._v("\n\tspecialprofilealloc   fixalloc "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// allocator for specialprofile*")]),s._v("\n\tspeciallock           mutex    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// lock for special record allocators.")]),s._v("\n\tarenaHintAlloc        fixalloc "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// allocator for arenaHints")]),s._v("\n\n\tunused "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("specialfinalizer "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// never set, just here to force the specialfinalizer type into DWARF")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br"),a("span",{staticClass:"line-number"},[s._v("87")]),a("br"),a("span",{staticClass:"line-number"},[s._v("88")]),a("br"),a("span",{staticClass:"line-number"},[s._v("89")]),a("br"),a("span",{staticClass:"line-number"},[s._v("90")]),a("br"),a("span",{staticClass:"line-number"},[s._v("91")]),a("br"),a("span",{staticClass:"line-number"},[s._v("92")]),a("br"),a("span",{staticClass:"line-number"},[s._v("93")]),a("br"),a("span",{staticClass:"line-number"},[s._v("94")]),a("br"),a("span",{staticClass:"line-number"},[s._v("95")]),a("br"),a("span",{staticClass:"line-number"},[s._v("96")]),a("br"),a("span",{staticClass:"line-number"},[s._v("97")]),a("br"),a("span",{staticClass:"line-number"},[s._v("98")]),a("br"),a("span",{staticClass:"line-number"},[s._v("99")]),a("br"),a("span",{staticClass:"line-number"},[s._v("100")]),a("br"),a("span",{staticClass:"line-number"},[s._v("101")]),a("br"),a("span",{staticClass:"line-number"},[s._v("102")]),a("br"),a("span",{staticClass:"line-number"},[s._v("103")]),a("br"),a("span",{staticClass:"line-number"},[s._v("104")]),a("br"),a("span",{staticClass:"line-number"},[s._v("105")]),a("br"),a("span",{staticClass:"line-number"},[s._v("106")]),a("br"),a("span",{staticClass:"line-number"},[s._v("107")]),a("br"),a("span",{staticClass:"line-number"},[s._v("108")]),a("br"),a("span",{staticClass:"line-number"},[s._v("109")]),a("br"),a("span",{staticClass:"line-number"},[s._v("110")]),a("br"),a("span",{staticClass:"line-number"},[s._v("111")]),a("br"),a("span",{staticClass:"line-number"},[s._v("112")]),a("br"),a("span",{staticClass:"line-number"},[s._v("113")]),a("br"),a("span",{staticClass:"line-number"},[s._v("114")]),a("br"),a("span",{staticClass:"line-number"},[s._v("115")]),a("br"),a("span",{staticClass:"line-number"},[s._v("116")]),a("br"),a("span",{staticClass:"line-number"},[s._v("117")]),a("br"),a("span",{staticClass:"line-number"},[s._v("118")]),a("br"),a("span",{staticClass:"line-number"},[s._v("119")]),a("br"),a("span",{staticClass:"line-number"},[s._v("120")]),a("br"),a("span",{staticClass:"line-number"},[s._v("121")]),a("br"),a("span",{staticClass:"line-number"},[s._v("122")]),a("br"),a("span",{staticClass:"line-number"},[s._v("123")]),a("br"),a("span",{staticClass:"line-number"},[s._v("124")]),a("br"),a("span",{staticClass:"line-number"},[s._v("125")]),a("br"),a("span",{staticClass:"line-number"},[s._v("126")]),a("br"),a("span",{staticClass:"line-number"},[s._v("127")]),a("br"),a("span",{staticClass:"line-number"},[s._v("128")]),a("br"),a("span",{staticClass:"line-number"},[s._v("129")]),a("br"),a("span",{staticClass:"line-number"},[s._v("130")]),a("br"),a("span",{staticClass:"line-number"},[s._v("131")]),a("br"),a("span",{staticClass:"line-number"},[s._v("132")]),a("br"),a("span",{staticClass:"line-number"},[s._v("133")]),a("br"),a("span",{staticClass:"line-number"},[s._v("134")]),a("br"),a("span",{staticClass:"line-number"},[s._v("135")]),a("br"),a("span",{staticClass:"line-number"},[s._v("136")]),a("br"),a("span",{staticClass:"line-number"},[s._v("137")]),a("br"),a("span",{staticClass:"line-number"},[s._v("138")]),a("br"),a("span",{staticClass:"line-number"},[s._v("139")]),a("br"),a("span",{staticClass:"line-number"},[s._v("140")]),a("br"),a("span",{staticClass:"line-number"},[s._v("141")]),a("br"),a("span",{staticClass:"line-number"},[s._v("142")]),a("br"),a("span",{staticClass:"line-number"},[s._v("143")]),a("br"),a("span",{staticClass:"line-number"},[s._v("144")]),a("br"),a("span",{staticClass:"line-number"},[s._v("145")]),a("br"),a("span",{staticClass:"line-number"},[s._v("146")]),a("br"),a("span",{staticClass:"line-number"},[s._v("147")]),a("br"),a("span",{staticClass:"line-number"},[s._v("148")]),a("br"),a("span",{staticClass:"line-number"},[s._v("149")]),a("br"),a("span",{staticClass:"line-number"},[s._v("150")]),a("br"),a("span",{staticClass:"line-number"},[s._v("151")]),a("br"),a("span",{staticClass:"line-number"},[s._v("152")]),a("br"),a("span",{staticClass:"line-number"},[s._v("153")]),a("br"),a("span",{staticClass:"line-number"},[s._v("154")]),a("br"),a("span",{staticClass:"line-number"},[s._v("155")]),a("br"),a("span",{staticClass:"line-number"},[s._v("156")]),a("br"),a("span",{staticClass:"line-number"},[s._v("157")]),a("br"),a("span",{staticClass:"line-number"},[s._v("158")]),a("br"),a("span",{staticClass:"line-number"},[s._v("159")]),a("br"),a("span",{staticClass:"line-number"},[s._v("160")]),a("br"),a("span",{staticClass:"line-number"},[s._v("161")]),a("br"),a("span",{staticClass:"line-number"},[s._v("162")]),a("br"),a("span",{staticClass:"line-number"},[s._v("163")]),a("br"),a("span",{staticClass:"line-number"},[s._v("164")]),a("br"),a("span",{staticClass:"line-number"},[s._v("165")]),a("br"),a("span",{staticClass:"line-number"},[s._v("166")]),a("br"),a("span",{staticClass:"line-number"},[s._v("167")]),a("br"),a("span",{staticClass:"line-number"},[s._v("168")]),a("br"),a("span",{staticClass:"line-number"},[s._v("169")]),a("br"),a("span",{staticClass:"line-number"},[s._v("170")]),a("br"),a("span",{staticClass:"line-number"},[s._v("171")]),a("br"),a("span",{staticClass:"line-number"},[s._v("172")]),a("br"),a("span",{staticClass:"line-number"},[s._v("173")]),a("br"),a("span",{staticClass:"line-number"},[s._v("174")]),a("br"),a("span",{staticClass:"line-number"},[s._v("175")]),a("br"),a("span",{staticClass:"line-number"},[s._v("176")]),a("br"),a("span",{staticClass:"line-number"},[s._v("177")]),a("br"),a("span",{staticClass:"line-number"},[s._v("178")]),a("br"),a("span",{staticClass:"line-number"},[s._v("179")]),a("br")])]),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" mcentral "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\tlock      mutex\n\tspanclass spanClass\n\tnonempty  mSpanList "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// list of spans with a free object, ie a nonempty free list")]),s._v("\n\tempty     mSpanList "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// list of spans with no free objects (or cached in an mcache)")]),s._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// nmalloc is the cumulative count of objects allocated from")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// this mcentral, assuming all spans in mcaches are")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// fully-allocated. Written atomically, read under STW.")]),s._v("\n\tnmalloc "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint64")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" mspan "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\tnext "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("mspan     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// next span in list, or nil if none")]),s._v("\n\tprev "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("mspan     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// previous span in list, or nil if none")]),s._v("\n\tlist "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("mSpanList "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// For debugging. TODO: Remove.")]),s._v("\n\n\tstartAddr "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// address of first byte of span aka s.base()")]),s._v("\n\tnpages    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// number of pages in span")]),s._v("\n\n\tmanualFreeList gclinkptr "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// list of free objects in mSpanManual spans")]),s._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// freeindex is the slot index between 0 and nelems at which to begin scanning")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// for the next free object in this span.")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Each allocation scans allocBits starting at freeindex until it encounters a 0")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// indicating a free object. freeindex is then adjusted so that subsequent scans begin")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// just past the newly discovered free object.")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// If freeindex == nelem, this span has no free objects.")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// allocBits is a bitmap of objects in this span.")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// If n >= freeindex and allocBits[n/8] & (1<<(n%8)) is 0")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// then object n is free;")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// otherwise, object n is allocated. Bits starting at nelem are")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// undefined and should never be referenced.")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Object n starts at address n*elemsize + (start << pageShift).")]),s._v("\n\tfreeindex "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// TODO: Look up nelems from sizeclass and remove this field if it")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// helps performance.")]),s._v("\n\tnelems "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// number of object in the span.")]),s._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Cache of the allocBits at freeindex. allocCache is shifted")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// such that the lowest bit corresponds to the bit freeindex.")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// allocCache holds the complement of allocBits, thus allowing")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ctz (count trailing zero) to use it directly.")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// allocCache may contain bits beyond s.nelems; the caller must ignore")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// these.")]),s._v("\n\tallocCache "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint64")]),s._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// allocBits and gcmarkBits hold pointers to a span's mark and")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// allocation bits. The pointers are 8 byte aligned.")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// There are three arenas where this data is held.")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// free: Dirty arenas that are no longer accessed")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//       and can be reused.")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// next: Holds information to be used in the next GC cycle.")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// current: Information being used during this GC cycle.")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// previous: Information being used during the last GC cycle.")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// A new GC cycle starts with the call to finishsweep_m.")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// finishsweep_m moves the previous arena to the free arena,")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// the current arena to the previous arena, and")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// the next arena to the current arena.")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// The next arena is populated as the spans request")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// memory to hold gcmarkBits for the next GC cycle as well")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// as allocBits for newly allocated spans.")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// The pointer arithmetic is done "by hand" instead of using')]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// arrays to avoid bounds checks along critical performance")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// paths.")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// The sweep will free the old allocBits and set allocBits to the")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// gcmarkBits. The gcmarkBits are replaced with a fresh zeroed")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// out memory.")]),s._v("\n\tallocBits  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("gcBits\n\tgcmarkBits "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("gcBits\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// sweep generation:")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// if sweepgen == h->sweepgen - 2, the span needs sweeping")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// if sweepgen == h->sweepgen - 1, the span is currently being swept")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// if sweepgen == h->sweepgen, the span is swept and ready to use")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// if sweepgen == h->sweepgen + 1, the span was cached before sweep began and is still cached, and needs sweeping")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// if sweepgen == h->sweepgen + 3, the span was swept and then cached and is still cached")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// h->sweepgen is incremented by 2 after every GC")]),s._v("\n\n\tsweepgen    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint32")]),s._v("\n\tdivMul      "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint16")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// for divide by elemsize - divMagic.mul")]),s._v("\n\tbaseMask    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint16")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// if non-0, elemsize is a power of 2, & this will get object allocation base")]),s._v("\n\tallocCount  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint16")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// number of allocated objects")]),s._v("\n\tspanclass   spanClass  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// size class and noscan (uint8)")]),s._v("\n\tstate       mSpanState "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// mspaninuse etc")]),s._v("\n\tneedzero    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint8")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// needs to be zeroed before allocation")]),s._v("\n\tdivShift    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint8")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// for divide by elemsize - divMagic.shift")]),s._v("\n\tdivShift2   "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint8")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// for divide by elemsize - divMagic.shift2")]),s._v("\n\tscavenged   "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// whether this span has had its pages released to the OS")]),s._v("\n\telemsize    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// computed from sizeclass or from npages")]),s._v("\n\tlimit       "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// end of data in span")]),s._v("\n\tspeciallock mutex      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// guards specials list")]),s._v("\n\tspecials    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("special   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// linked list of special records sorted by offset.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br")])]),a("h2",{attrs:{id:"内存管理单元"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存管理单元"}},[s._v("#")]),s._v(" 内存管理单元")]),s._v(" "),a("p",[s._v("mspan、mcache、mcentral、mheap")]),s._v(" "),a("h2",{attrs:{id:"堆内存管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#堆内存管理"}},[s._v("#")]),s._v(" 堆内存管理")]),s._v(" "),a("h2",{attrs:{id:"全局栈内存管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全局栈内存管理"}},[s._v("#")]),s._v(" 全局栈内存管理")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// rumtime/proc.go")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("schedinit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// runtime/stack.go")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("stackinit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nstackpool\nstackpoolItem\nstackLarge\nmSpanList\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h2",{attrs:{id:"申请内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#申请内存"}},[s._v("#")]),s._v(" 申请内存")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// runtime/proc.go")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("newproc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("newproc1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"栈扩容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈扩容"}},[s._v("#")]),s._v(" 栈扩容")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// rumtime/stack.go")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("newstack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("copystack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"栈收缩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈收缩"}},[s._v("#")]),s._v(" 栈收缩")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// runtime/mgcmark.go")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("scanstack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("shrinkstack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"段错误"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#段错误"}},[s._v("#")]),s._v(" 段错误")]),s._v(" "),a("p",[s._v("指访问的内存超出了系统给这个程序所设定的内存空间,如访问不存在内存地址、访问受保护的内存地址、访问只读内存地址、栈溢出等.")]),s._v(" "),a("p",[s._v("进程表(PCB)中保存着物理内存的起始地址(base)和长度(bound结束地址或limit长度).当进程被调度时会操作系统会从PCB中读取base和bound,然后拷贝到cpu寄存器中,cpu会用虚拟地址加base来找到物理地址.如果超出limit就会是一个不属于他的地址.cpu会抛出一个异常,如果操作系统设定了异常处理程序,就会被cpu唤醒,并且知道发生了cpu内存异常,默认给出错进程发送一个信号(SIGSEGV段错误),这个进程因为不合法的内存访问而终止.")]),s._v(" "),a("p",[s._v("内存碎片: 操作系统分配了内存,进程却没使用到,")]),s._v(" "),a("p",[s._v("分段: 物理内存按照虚拟逻辑段分段,code、heap、stack,虚拟内存会分段映射到物理内存中,根据base和bound来计算,这样heap和stack中的空白就是内存碎片,不用实际分配内存.")]),s._v(" "),a("p",[s._v("段共享: 物理内存分段解决了为空闲虚拟内存分配物理内存的问题.还可以在不同进程的虚拟地址中共享物理内存.如两次运行一个程序,代码段是共享的.只要分配独立的heap和stack就可以了.")]),s._v(" "),a("p",[s._v("段保护: 每个物理段创建出来会注册一个权限标识,如果是只读的,cpu如果进行写入操作系统就会禁止该行为,如code段,heap和stack是可读可写的不可执行,防止向heap和stack中注入恶意代码.内存段全线可以在运行时改变.")]),s._v(" "),a("p",[s._v("mmap可以创建共享区域.")]),s._v(" "),a("p",[s._v("分段会造成过多内存碎片,用户级进程会不断分配和释放内存,所以这个段会不断扩张和收缩,操作系统必须维护空闲内存列表.如果空闲内存大于进行请求分配的内存,但这个空闲列表不是连续的.不能把这些空闲分配给进程就会拒绝进程的内存分配请求.操作系统对内存压缩把空闲区域合并成一个大的连续内存块,这样就可以满足之后的内存分配请求了.压缩耗时会占用cpu,")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("/proc/pid/maps "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看进程段")]),s._v("\npmap "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看进程段")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("内存分页 : 分页信息会保存保存在一个进程页表到结构中,页表保存物理地址和虚拟地址的映射.页是操作系统管理的最小单元.分页后每个进程关联一个页表结构,不需要使用bound和limit了.而是虚拟页号和页偏移.内存访问一次获取页表,一次获取数据.")]),s._v(" "),a("p",[s._v("快速重编址缓存 :")]),s._v(" "),a("p",[s._v("段错误 : 虚拟地址转换成物理地址如果这个物理地址超出物理段界限、违反段保护权限,默认情况下操作系统会返回一个SIGSEGV错误信号.默认处理行为是kill这个进程,并输出一个消息"),a("code",[s._v("segmentation fault")]),s._v("说白了就是内存访问错误.")]),s._v(" "),a("h2",{attrs:{id:"变量分配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量分配"}},[s._v("#")]),s._v(" 变量分配")]),s._v(" "),a("p",[s._v("提供3种分析变量分配到堆还是栈的分析方式,如果编译器不能确保变量在函数 return 之后不再被引用或者一个局部变量非常大会被分配在堆上而不是栈上,如果一个变量被取地址就有可能被分配到堆上.指针可以减少变量在函数传递时的数据值拷贝,如果分配到堆上 的共享变量过多会增加 GC 压力.")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 逃逸分析")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("go")]),s._v(" build "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("gcflags"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'-m -m'")]),s._v(" main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("go")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 内存分配器追踪")]),s._v("\nGODEBUG"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("allocfreetrace"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("go")]),s._v(" run main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("go")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("grep "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("C "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" mian "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// grep 只显示用户代码引发的分配信息")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 汇编分析")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("GC会用一个 gcmarkBits 来跟踪正在使用的你村.正在使用的你村会被标记为黑色,当前执行而又不能到达的内存保持为白色")]),s._v(" "),a("h2",{attrs:{id:"内存清理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存清理"}},[s._v("#")]),s._v(" 内存清理")]),s._v(" "),a("h2",{attrs:{id:"goroutine栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#goroutine栈"}},[s._v("#")]),s._v(" goroutine栈")]),s._v(" "),a("p",[s._v("变量要么在栈中传递要么在堆中共享.只读变量可能分配在代码段.")]),s._v(" "),a("ol",[a("li",[s._v("当栈不够用时创建一个更大的栈")]),s._v(" "),a("li",[s._v("把老栈所有内容拷贝到新的栈")]),s._v(" "),a("li",[s._v("调整拷贝过去的内容中的指针(栈内的地址只被栈里使用,堆内没有使用),把老栈地址改成新栈的(栈内地址减去老栈地址求出相对起始地址的偏移量,然后再加上新栈的起始地址,就可以得到新的内存地址),在堆内的变量无法知道哪个变量用了栈内地址,无法更改它的值,所以有了逃逸分析避免这个问题")]),s._v(" "),a("li",[s._v("销毁老的栈")]),s._v(" "),a("li",[s._v("goroutine 的栈变大了之后不再收缩,一致保持该大小直到被回收.")])]),s._v(" "),a("h2",{attrs:{id:"逃逸分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逃逸分析"}},[s._v("#")]),s._v(" 逃逸分析")]),s._v(" "),a("p",[s._v("函数内变量没有被传到函数外就没有逃逸,否则逃逸,逃逸的变量分配到堆上,通过逃逸分析对变量位置分配提前优化,减少堆上变量,减轻 gc 压力.")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// go run -gcflags "-m -l" main.go')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\tresult "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%v\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 传给 Prinf 使传递了指针所以发生逃逸")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\tresult "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" b\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%v\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 传给 Prinf 使传递了指针所以发生逃逸")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" result\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\tresult "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%v\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ??? 为什么发送逃逸 ??? 被 fmt.Printf 引用了就会一定发生逃逸")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\tresult "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" b\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" result\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h2",{attrs:{id:"内联"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内联"}},[s._v("#")]),s._v(" 内联")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// go:noinline")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("禁止 go 对函数内联.内联是一种手动或编译器优化将简短函数调用替换成函数体本身可以消除函数调用开销")]),s._v(" "),a("h2",{attrs:{id:"内存分配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存分配"}},[s._v("#")]),s._v(" 内存分配")]),s._v(" "),a("p",[s._v("32k 以下内存申请会从 mcache 分配, mcache 持有一系列大小为 32k 的内存块一个内存块叫一个 msapn,每个 p 会绑定一个 mcache, nache 包含 70 种 mspan 从 8k 到 32k,当 mcache 没有空闲时会从 mcentral 申请, mcentral 持有特定大小的 mspan 列表包含分配出去的和未分配出去的.")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" mcentral "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 互斥锁")]),s._v("\n    lock mutex\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 规格")]),s._v("\n    sizeclass "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int32")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 尚有空闲object的mspan链表")]),s._v("\n    nonempty mSpanList\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 没有空闲object的mspan链表，或者是已被mcache取走的msapn链表")]),s._v("\n    empty mSpanList\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 已累计分配的对象个数")]),s._v("\n    nmalloc "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint64")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("mheap 主要用于大对象分配,以及管理未切割的 mspan,用于给 mcentral 切割成小对象, mheap 中有所有规格的 mcentral,运行时使用 runtime.heaparea 管理所有内存,每个 heaparea 都会管理 64M 内存.如果 area 没有足够空间会调用 runtime.mhap.sysalloc 从系统申请内存.")]),s._v(" "),a("h2",{attrs:{id:"内存泄漏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存泄漏"}},[s._v("#")]),s._v(" 内存泄漏")]),s._v(" "),a("p",[s._v("指程序中动态分配的堆内存由于某种原因未释放或无法释放,造成内存浪费. Go 中内存泄漏大多数原因是 goroutine 泄漏.")]),s._v(" "),a("blockquote",[a("ol",[a("li",[s._v("MADV_DONTNEED : 内核会在进程的页表中将这些页标记为"),a("em",[s._v("未分配")]),s._v(",从而进程的 RSS 会尽快释放和变小,OS 后续可以将对应的物理页分配给其他进程")]),s._v(" "),a("li",[s._v("MADV_FREE : 内核只会在页表中将这些进程表计为"),a("em",[s._v("可回收")]),s._v(",在需要的时候才回收这些页面")]),s._v(" "),a("li",[s._v("1.12 以前 MADV_DONTNEED, 1.12-1.15 MADV_FREE 1.16 MADV_DONTNEED")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);