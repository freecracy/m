(window.webpackJsonp=window.webpackJsonp||[]).push([[109],{645:function(s,a,t){"use strict";t.r(a);var e=t(20),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"内存碎片"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存碎片"}},[s._v("#")]),s._v(" 内存碎片")]),s._v(" "),t("h2",{attrs:{id:"内存分配策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存分配策略"}},[s._v("#")]),s._v(" 内存分配策略")]),s._v(" "),t("h3",{attrs:{id:"jemalloc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jemalloc"}},[s._v("#")]),s._v(" jemalloc")]),s._v(" "),t("p",[s._v("按照固定空间分配,比如 8 字节,32 字节,2k,4k.当申请内存接近某个固定值时会分配固定大小.")]),s._v(" "),t("ul",[t("li",[s._v("优点是减少内存分配次数,一次分配可能够 2 次使用")]),s._v(" "),t("li",[s._v("缺点是申请和分配的空间不一样,剩余空间就形成内存碎片,一旦内存碎片过多,内存利用率就降低了")])]),s._v(" "),t("h2",{attrs:{id:"判断内存碎片"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#判断内存碎片"}},[s._v("#")]),s._v(" 判断内存碎片")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("info memory\n\nmem_fragmentation_ratio "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 操作系统实际分配内存/redis申请内存")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("ul",[t("li",[s._v("大于 1 小于 1.5 : 合理范围")]),s._v(" "),t("li",[s._v("大于 1.5 : 内存碎片率超过 50% 需要采取措施降低碎片率")]),s._v(" "),t("li",[s._v("小于 1 : 实际分片内存小雨申请内存,内存不足会导致部分数据写入 swap 中,访问 swap 数据延迟很大")])]),s._v(" "),t("h2",{attrs:{id:"清理内存碎片"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#清理内存碎片"}},[s._v("#")]),s._v(" 清理内存碎片")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("config "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" activedefrag "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("yes")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启动自动清理")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 清理时间")]),s._v("\nactive-defrag-ignore-bytes 400mb "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果内存碎片达到了400mb,开始清理")]),s._v("\nactive-defrag-threshold-lower "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 内存碎片空间占操作系统分配给 Redis 的总空间比例达到20%时,开始清理")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 不影响正常请求")]),s._v("\nactive-defrag-cycle-min "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("25")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 自动清理过程所用 CPU 时间的比例不低于 25%,保证清理能正常开展")]),s._v("\nactive-defrag-cycle-max "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("75")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 自动清理过程所用 CPU 时间的比例不高于 75%,一旦超过，就停止清理,避免在清理时,大量的内存拷贝阻塞 Redis,导致响应延迟升高.")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])])])}),[],!1,null,null,null);a.default=n.exports}}]);