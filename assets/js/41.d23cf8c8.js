(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{498:function(s,t,a){s.exports=a.p+"assets/img/redisthreads.34d702ee.png"},523:function(s,t,a){"use strict";a.r(t);var n=a(20),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"集群"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#集群"}},[s._v("#")]),s._v(" 集群")]),s._v(" "),n("h2",{attrs:{id:"扩容缩容"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#扩容缩容"}},[s._v("#")]),s._v(" 扩容缩容")]),s._v(" "),n("p",[s._v("每个节点都保存槽数据,当节点数量变动时,这些槽数据就会根据虚拟槽算法被迁移到其他节点上.")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v("cluster meet "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" port\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("如果这个新节点是主节点需要对其进行槽数据扩容,如果这个节点是从节点,需要同步主节点数据.都需要同步数据.")]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 客户端对目标节点发起准备倒入槽数据命令,让目标节点准备好倒入槽数据")]),s._v("\ncluster setslot "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("slot"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" importing "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("sourceNodeId"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 对原节点发送命令,准备迁出槽数据")]),s._v("\ncluster setslot "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("slot"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" importing "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("sourceNodeId"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 把迁移的数据获取出来, count 表示迁移个数")]),s._v("\ncluster getkeysinslot "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("slot"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("count"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在源节点上把获取的键通过流水线批量迁移到目标节点")]),s._v("\nmigrate "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("targetIP"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("torgetPort"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" keys "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("keys"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 重复以上两部迁移数据")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 通知对应槽分配到目标节点,并广播给其他主节点,更新自身槽对应表")]),s._v("\ncluster setslot "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("slot"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" node "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("targetNodeId"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 下线时通知其他节点忘记自己,收到 forget 命令的节点会把下线节点放入仅用列表,之后不再发送ping")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 不过这个表超时时间是 60 秒,超过后依旧会 ping")]),s._v("\ncluster foget "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("downNodeId"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 彻底下线")]),s._v("\nredis-trib.rb del-nod"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("host:port"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" downNodeId\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("h2",{attrs:{id:"故障发现和恢复"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#故障发现和恢复"}},[s._v("#")]),s._v(" 故障发现和恢复")]),s._v(" "),n("p",[s._v("计划下线和故障下线,故障下线分主观下线和客观下线")]),s._v(" "),n("p",[s._v("主观下线 : 节点会向其他节点发送 ping 消息,正常会收到 pong 消息,同时会更新与其他节点的通讯时间,如果超过 cluster-node-timeout 会更新本地状态,标记主观下线")]),s._v(" "),n("p",[s._v("客观下线 : 下线信息会通过 gossip 协议同步其他节点,半数以上标记主观下线,会启动客观下线流程,客观下线只针对主节点,从节点会忽略,将主观下线保存到本地 clusterNode 的结构中,并检查主观下线时效性,如果超过了 cluster-node-timeout * 2 会忽略这个报告.,记录报告,并且比较标记主观下线报告数量大于持有主节点数量时标记客观下线,同时向集群中广播 fail 消息通知集群中其他节点,")]),s._v(" "),n("p",[s._v("恢复 :")]),s._v(" "),n("ol",[n("li",[s._v("资格检查 : 每个节点都会检查与主节点断开时间如果超过了 cluster-node-time * cluster-slave-validity-facto r(默认 10),不适合成为新的主节点")]),s._v(" "),n("li",[s._v("触发选举 : 偏移量大的参与选举")]),s._v(" "),n("li",[s._v("发起选举 : clusterNode.configEpoch 一个不断增加的整数,每次 ping 、pong 交互都会更新,记录每个节点版本和整个集群版本,更新完后会发起选举消息,并保证从节点在一次配置纪元中只能发起一次选举.")]),s._v(" "),n("li",[s._v("替换主节点 : 新主节点选举出来后,删除原主节点负责的槽数据,把这些槽添加到自己的节点上.并广播其他节点.")])]),s._v(" "),n("p",[s._v("每一个 sentinel 节点将会定时向 "),n("code",[s._v("_sentinel_: hello")]),s._v("频道发送消息,并且每个 sentinel 都会订阅这个频道,当 sentinel 发生主节点故障转移,客户端可以订阅 "),n("code",[s._v("+switch-master")]),s._v("频道,一旦结束故障转移就会发布主节点消息.")]),s._v(" "),n("h2",{attrs:{id:"redis6-0"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redis6-0"}},[s._v("#")]),s._v(" Redis6.0")]),s._v(" "),n("h3",{attrs:{id:"客户端缓存"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#客户端缓存"}},[s._v("#")]),s._v(" 客户端缓存")]),s._v(" "),n("ol",[n("li",[s._v("普通模式:track 一个 key,当 key 修改后通知客户端,只会执行一次,一个 get 一次 track,(trackingtablemax_key,默认没有数量限制,超过上限会随机删除已有 key 并通知客户端)")]),s._v(" "),n("li",[s._v("广播模式:只要键被修改或删除,符合规则的客户端会收到实效消息,服务端模式匹配增加 cpu 时间.")]),s._v(" "),n("li",[s._v("转发模式:pub/sub 通知客户端")])]),s._v(" "),n("h3",{attrs:{id:"多线程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多线程"}},[s._v("#")]),s._v(" 多线程")]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 后台线程执行")]),s._v("\nunlink key\nflushdb async\nflushall async\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("4.0 的多线程主要针对大 key 删除操作")]),s._v(" "),n("p",[s._v("6.0 的多线程来提供 io 读写性能,将主线程的 IO 读写拆分给一组对立的线程区执行,这样可以使多个 socket 的读写并行处理,redis 的命令依旧是主线程串行执行,性能基本提高一倍.")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v("io-threads-do-reads "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 默认禁用")]),s._v("\nis-threads n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 线程数量,一旦应要小于机器核数")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("img",{attrs:{src:a(498),alt:"redisthreads"}})]),s._v(" "),n("h3",{attrs:{id:"cluster-proxy"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cluster-proxy"}},[s._v("#")]),s._v(" cluster-proxy")]),s._v(" "),n("h2",{attrs:{id:"配置文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置文件"}},[s._v("#")]),s._v(" 配置文件")]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[s._v("daemonize "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("yes")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置后台启动")]),s._v("\npidfile /var/run/redis.pid "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# pid 文件")]),s._v("\nport "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 端口")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("bind")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1 "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 主机地址 0.0.0.0 表示都可以访问 127.0.0.1 表示只允许本机访问")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("timeout")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("900")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 客户端闲置多长时间后关闭连接,如果指定为0,表示关闭该功能")]),s._v("\nlogfile stdout "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 日志记录方式,默认为标准输出")]),s._v("\nlogfile "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1.log"')]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 日志文件")]),s._v("\ndatabases "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 数据库数量,默认 0")]),s._v("\nsave "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("900")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 900秒（15分钟）内有1个更改")]),s._v("\nsave "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("300")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 300秒（5分钟）内有10个更改")]),s._v("\nsave "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("60")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 60秒内有10000个更改")]),s._v("\nrdbcompression "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("yes")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 是否压缩")]),s._v("\ndbfilename dump.rdb "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 文件名")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("dir")]),s._v(" ./    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 文件目录")]),s._v("\nslaveof  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 主从同步")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果非零，则设置SO_KEEPALIVE选项来向空闲连接的客户端发送ACK")]),s._v("\ntcp-keepalive "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("60")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 默认如果开启RDB快照(至少一条save指令)并且最新的后台保存失败，Redis将会停止接受写操作")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这将使用户知道数据没有正确的持久化到硬盘，否则可能没人注意到并且造成一些灾难")]),s._v("\nstop-writes-on-bgsave-error "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("yes")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 默认如果开启RDB快照(至少一条save指令)并且最新的后台保存失败，Redis将会停止接受写操作。")]),s._v("\nstop-writes-on-bgsave-error "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("yes")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当导出到 .rdb 数据库时是否用LZF压缩字符串对象")]),s._v("\nrdbcompression "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("yes")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 版本5的RDB有一个CRC64算法的校验和放在了文件的最后。这将使文件格式更加可靠。")]),s._v("\nrdbchecksum "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("yes")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 持久化数据库的文件名")]),s._v("\ndbfilename dump-master.rdb\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 工作目录")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("dir")]),s._v(" /usr/local/redis-4.0.8/redis_master/\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# slav服务连接master的密码")]),s._v("\nmasterauth testmaster123\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当一个slave失去和master的连接，或者同步正在进行中，slave的行为可以有两种：")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#1) 如果 slave-serve-stale-data 设置为 "yes" (默认值)，slave会继续响应客户端请求，可能是正常数据，或者是过时了的数据，也可能是还没获得值的空数据。')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# 2) 如果 slave-serve-stale-data 设置为 "no"，slave会回复"正在从master同步')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# （SYNC with master in progress）"来处理各种请求，除了 INFO 和 SLAVEOF 命令。')]),s._v("\nslave-serve-stale-data "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("yes")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 配置是否仅读")]),s._v("\nslave-read-only "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("yes")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果你选择“yes”Redis将使用更少的TCP包和带宽来向slaves发送数据。但是这将使数据传输到slave上有延迟，Linux内核的默认配置会达到40毫秒")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# 如果你选择了 "no" 数据传输到salve的延迟将会减少但要使用更多的带宽')]),s._v("\nrepl-disable-tcp-nodelay no\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# slave的优先级，优先级数字小的salve会优先考虑提升为master")]),s._v("\nslave-priority "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 密码验证")]),s._v("\nrequirepass testmaster123\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# redis实例最大占用内存，一旦内存使用达到上限，Redis会根据选定的回收策略（参见：")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# maxmemmory-policy）删除key")]),s._v("\nmaxmemory 3gb\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 最大内存策略：如果达到内存限制了，Redis如何选择删除key。")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# volatile-lru -> 根据LRU算法删除带有过期时间的key。")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# allkeys-lru -> 根据LRU算法删除任何key。")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# volatile-random -> 根据过期设置来随机删除key, 具备过期时间的key。")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# allkeys->random -> 无差别随机删, 任何一个key。")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# volatile-ttl -> 根据最近过期时间来删除（辅以TTL）, 这是对于有过期时间的key")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# noeviction -> 谁也不删，直接在写操作时返回错误。")]),s._v("\nmaxmemory-policy volatile-lru\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# AOF开启")]),s._v("\nappendonly no\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# aof文件名")]),s._v("\nappendfilename "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"appendonly.aof"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# fsync() 系统调用告诉操作系统把数据写到磁盘上，而不是等更多的数据进入输出缓冲区。")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 有些操作系统会真的把数据马上刷到磁盘上；有些则会尽快去尝试这么做。")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Redis支持三种不同的模式：")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# no：不要立刻刷，只有在操作系统需要刷的时候再刷。比较快。")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# always：每次写操作都立刻写入到aof文件。慢，但是最安全。")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# everysec：每秒写一次。折中方案。")]),s._v("\nappendfsync everysec\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# 如果AOF的同步策略设置成 "always" 或者 "everysec"，并且后台的存储进程（后台存储或写入AOF')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 日志）会产生很多磁盘I/O开销。某些Linux的配置下会使Redis因为 fsync()系统调用而阻塞很久。")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 注意，目前对这个情况还没有完美修正，甚至不同线程的 fsync() 会阻塞我们同步的write(2)调用。")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 为了缓解这个问题，可以用下面这个选项。它可以在 BGSAVE 或 BGREWRITEAOF 处理时阻止主进程进行fsync()。")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# 这就意味着如果有子进程在进行保存操作，那么Redis就处于"不可同步"的状态。')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这实际上是说，在最差的情况下可能会丢掉30秒钟的日志数据。（默认Linux设定）")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# 如果你有延时问题把这个设置成"yes"，否则就保持"no"，这是保存持久数据的最安全的方式。')]),s._v("\nno-appendfsync-on-rewrite "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("yes")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 自动重写AOF文件")]),s._v("\nauto-aof-rewrite-percentage "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("\nauto-aof-rewrite-min-size 64mb\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# AOF文件可能在尾部是不完整的（这跟system关闭有问题，尤其是mount ext4文件系统时")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 没有加上data=ordered选项。只会发生在os死时，redis自己死不会不完整）。")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 那redis重启时load进内存的时候就有问题了。")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 发生的时候，可以选择redis启动报错，并且通知用户和写日志，或者load尽量多正常的数据。")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果aof-load-truncated是yes，会自动发布一个log给客户端然后load（默认）。")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果是no，用户必须手动redis-check-aof修复AOF文件才可以。")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 注意，如果在读取的过程中，发现这个aof是损坏的，服务器也是会退出的，")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这个选项仅仅用于当服务器尝试读取更多的数据但又找不到相应的数据时。")]),s._v("\naof-load-truncated "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("yes")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Lua 脚本的最大执行时间，毫秒为单位")]),s._v("\nlua-time-limit "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5000")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Redis慢查询日志可以记录超过指定时间的查询")]),s._v("\nslowlog-log-slower-than "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这个长度没有限制。只是要主要会消耗内存。你可以通过 SLOWLOG RESET 来回收内存。")]),s._v("\nslowlog-max-len "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("128")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 客户端的输出缓冲区的限制，可用于强制断开那些因为某种原因从服务器读取数据的速度不够快的客户端")]),s._v("\nclient-output-buffer-limit normal "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\nclient-output-buffer-limit slave 256mb 64mb "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("60")]),s._v("\nclient-output-buffer-limit pubsub 32mb 8mb "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("60")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当一个子进程重写AOF文件时，文件每生成32M数据会被同步")]),s._v("\naof-rewrite-incremental-fsync "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("yes")]),s._v("\nslaveof "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 配置master的ip，port")]),s._v("\nmasterauth "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 配置访问master的密码")]),s._v("\nslaveof-serve-stale-data no\nsentinel monitor mymaster "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\ndaemonize "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("yes")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在后台运行")]),s._v("\nsentinel monitor mymaster "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 给master起一个名字mymaster，并且配置master的ip和端口")]),s._v("\nsentinel auth-pass mymaster "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# master的密码")]),s._v("\nport "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("26379")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#另外两个配置36379,46379端口")]),s._v("\nsentinel down-after-milliseconds mymaster "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3000")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 3s未回复PING就认为master主观下线")]),s._v("\nsentinel parallel-syncs mymaster "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 执行故障转移时，最多可以有2个slave实例在同步新的master实例")]),s._v("\nsentinel failover-timeout mymaster "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("100000")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果在10s内未能完成故障转移操作认为故障转移失败")]),s._v("\nport "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 本示例6个节点端口分别为6379、6380、6381、6382、6383、6384")]),s._v("\ndaemonize "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("yes")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# r后台运行")]),s._v("\npidfile /var/run/redis_6379.pid "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 分别对应6379、6380、6381、6382、6383、6384")]),s._v("\ncluster-enabled "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("yes")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 开启集群模式")]),s._v("\nmasterauth "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果设置了密码，需要指定master密码")]),s._v("\ncluster-config-file nodes_6379.conf "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 集群的配置文件，同样对应6379、6380、6381、6382、6383、6384六个节点")]),s._v("\ncluster-node-timeout "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 请求超时时间")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br"),n("span",{staticClass:"line-number"},[s._v("82")]),n("br"),n("span",{staticClass:"line-number"},[s._v("83")]),n("br"),n("span",{staticClass:"line-number"},[s._v("84")]),n("br"),n("span",{staticClass:"line-number"},[s._v("85")]),n("br"),n("span",{staticClass:"line-number"},[s._v("86")]),n("br"),n("span",{staticClass:"line-number"},[s._v("87")]),n("br"),n("span",{staticClass:"line-number"},[s._v("88")]),n("br"),n("span",{staticClass:"line-number"},[s._v("89")]),n("br"),n("span",{staticClass:"line-number"},[s._v("90")]),n("br"),n("span",{staticClass:"line-number"},[s._v("91")]),n("br"),n("span",{staticClass:"line-number"},[s._v("92")]),n("br"),n("span",{staticClass:"line-number"},[s._v("93")]),n("br"),n("span",{staticClass:"line-number"},[s._v("94")]),n("br"),n("span",{staticClass:"line-number"},[s._v("95")]),n("br"),n("span",{staticClass:"line-number"},[s._v("96")]),n("br"),n("span",{staticClass:"line-number"},[s._v("97")]),n("br"),n("span",{staticClass:"line-number"},[s._v("98")]),n("br"),n("span",{staticClass:"line-number"},[s._v("99")]),n("br"),n("span",{staticClass:"line-number"},[s._v("100")]),n("br"),n("span",{staticClass:"line-number"},[s._v("101")]),n("br"),n("span",{staticClass:"line-number"},[s._v("102")]),n("br"),n("span",{staticClass:"line-number"},[s._v("103")]),n("br"),n("span",{staticClass:"line-number"},[s._v("104")]),n("br"),n("span",{staticClass:"line-number"},[s._v("105")]),n("br"),n("span",{staticClass:"line-number"},[s._v("106")]),n("br"),n("span",{staticClass:"line-number"},[s._v("107")]),n("br"),n("span",{staticClass:"line-number"},[s._v("108")]),n("br"),n("span",{staticClass:"line-number"},[s._v("109")]),n("br"),n("span",{staticClass:"line-number"},[s._v("110")]),n("br"),n("span",{staticClass:"line-number"},[s._v("111")]),n("br"),n("span",{staticClass:"line-number"},[s._v("112")]),n("br"),n("span",{staticClass:"line-number"},[s._v("113")]),n("br"),n("span",{staticClass:"line-number"},[s._v("114")]),n("br"),n("span",{staticClass:"line-number"},[s._v("115")]),n("br"),n("span",{staticClass:"line-number"},[s._v("116")]),n("br"),n("span",{staticClass:"line-number"},[s._v("117")]),n("br"),n("span",{staticClass:"line-number"},[s._v("118")]),n("br")])]),n("blockquote",[n("p",[s._v("主从模式下 conf 中没有设置 bind 会导致本机 ip 过滤,配置 0.0.0.0 即可")]),s._v(" "),n("p",[s._v("主从模式下没有配置 requirepass 会导致 io 异常")])]),s._v(" "),n("h2",{attrs:{id:"消息"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#消息"}},[s._v("#")]),s._v(" 消息")]),s._v(" "),n("table",[n("thead",[n("tr",[n("th",[s._v("类型")]),s._v(" "),n("th",[s._v("描述")])])]),s._v(" "),n("tbody",[n("tr",[n("td",[s._v("INFO")]),s._v(" "),n("td",[s._v("获取主从最新信息,实现新节点发现")])]),s._v(" "),n("tr",[n("td",[s._v("PING")]),s._v(" "),n("td",[s._v("封装自身节点和其他节点状态数据")])]),s._v(" "),n("tr",[n("td",[s._v("PONG")]),s._v(" "),n("td",[s._v("当节点收到 MEET 和 PING 会回复 PONG,把自己的状态发给对方")])]),s._v(" "),n("tr",[n("td",[s._v("MEET")]),s._v(" "),n("td",[s._v("新节点加入集群时会向老节点发送该命令")])]),s._v(" "),n("tr",[n("td",[s._v("FAIL")]),s._v(" "),n("td",[s._v("当节点下线会向集群中广播该消息")])])])]),s._v(" "),n("h2",{attrs:{id:"主从复制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#主从复制"}},[s._v("#")]),s._v(" 主从复制")]),s._v(" "),n("h3",{attrs:{id:"配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[s._v("#")]),s._v(" 配置")]),s._v(" "),n("ol",[n("li",[s._v("从服务器配置文件加入 slaveof")]),s._v(" "),n("li",[s._v("启动命令加入"),n("code",[s._v("--slaveof")])]),s._v(" "),n("li",[s._v("客户端命令"),n("code",[s._v("slaveof")])]),s._v(" "),n("li",[s._v("断开主从关系"),n("code",[s._v("slaveof no one")])])]),s._v(" "),n("h3",{attrs:{id:"阶段"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#阶段"}},[s._v("#")]),s._v(" 阶段")]),s._v(" "),n("h4",{attrs:{id:"全量同步"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#全量同步"}},[s._v("#")]),s._v(" 全量同步")]),s._v(" "),n("ol",[n("li",[s._v("建立连接 : "),n("code",[s._v("psync ? -1``fullsync runid offset")])]),s._v(" "),n("li",[s._v("同步 rdb 文件 : 父进程 fork 子进程生成 rdb,不阻塞接收处理客户端命令")]),s._v(" "),n("li",[s._v("同步缓存区 : 缓存区记录 rdb 文件生成后接收到的写操作命令")])]),s._v(" "),n("h3",{attrs:{id:"增量同步"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#增量同步"}},[s._v("#")]),s._v(" 增量同步")]),s._v(" "),n("p",[s._v("当网络问题导致不一致,根据主从所保存的 offset 实现增量同步.")]),s._v(" "),n("h3",{attrs:{id:"过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#过程"}},[s._v("#")]),s._v(" 过程")]),s._v(" "),n("ol",[n("li",[s._v("保存主节点信息 : masterhost、masterport 保存完后返回客户端 ok,开始异步复制")]),s._v(" "),n("li",[s._v("建立连接 : 从节点每秒调用定时函数"),n("code",[s._v("replicationCron()")]),s._v("创建 socket 连接\n"),n("ul",[n("li",[s._v("从节点 : 为该 socket 建立一个专门处理复制工作的文件事件处理器,负责接收工作,接收 rdb 文件,接收命令传播")]),s._v(" "),n("li",[s._v("主节点 : accept 从节点 socket 后创建客户端状态,将从节点看成客户端")])])]),s._v(" "),n("li",[s._v("发送 ping : 发送 ping 检查 主节点信息\n"),n("ul",[n("li",[s._v("返回 pong : 连接正常,继续复制过程")]),s._v(" "),n("li",[s._v("超时 : 断开 socket , 并重连")]),s._v(" "),n("li",[s._v("返回 pong 以外结果 : 主节点当前无法处理该命令,从节点断开 socket,并重连")])])]),s._v(" "),n("li",[s._v("身份验证 : 如果从节点中设置了 masterauth, 从节点发送 auth 命令,参数即为 masterauth 中的值,如果不一致断开连接并重连")]),s._v(" "),n("li",[s._v("发送从节点端口信息 : 从节点发送监听端口,主节点保存端口信息到对应客户端的 slave_listening_port 中,主节点可以执行"),n("code",[s._v("info replication")]),s._v("查看")]),s._v(" "),n("li",[s._v("数据同步 : psync,包括全量同步和增量同步,主节点检查复制缓存区的 offset\n"),n("ul",[n("li",[s._v("复制偏移量 : 主节点和从节点分别维护一个 offset,代表主节点向从节点传递的字节数")]),s._v(" "),n("li",[s._v("复制积压缓存区 : 主节点维护,固定长度,默认 1M,备份主节点最近发送给从节点的数据,命令传播阶段主节点除了将写命令发送给从节点还会发送一份到该区域作为备份."),n("code",[s._v("repl-backlog-size")]),s._v("配置该区域大小.如果 offset 偏移量之后的数据还在该区域则执行部分复制,否则全量复制")]),s._v(" "),n("li",[s._v("runid : info server 可以查看 runid,如果 runid 相同校验 offset,如果不同只能进行全量复制")])])]),s._v(" "),n("li",[s._v("命令传播 : 该阶段除了发送写命令主从节点还维持心跳机制"),n("code",[s._v("ping")]),s._v("和"),n("code",[s._v("replconf ack")]),s._v(",命令传播为异步过程,主节点发送命令不会等待从节点回复会出现数据不一致. "),n("code",[s._v("repl-disable-tcp-nodelay no")]),s._v("配置项对包进行合并")])]),s._v(" "),n("h2",{attrs:{id:"一次请求-集群"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一次请求-集群"}},[s._v("#")]),s._v(" 一次请求(集群)")]),s._v(" "),n("h2",{attrs:{id:"部署"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#部署"}},[s._v("#")]),s._v(" 部署")]),s._v(" "),n("h3",{attrs:{id:"主从"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#主从"}},[s._v("#")]),s._v(" 主从")]),s._v(" "),n("h4",{attrs:{id:"全量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#全量"}},[s._v("#")]),s._v(" 全量")]),s._v(" "),n("ol",[n("li",[s._v("slave 发送 sync 到 master")]),s._v(" "),n("li",[s._v("master 收到后执行 bgsave 生成 rdb 文件")]),s._v(" "),n("li",[s._v("master 使用复制积压缓存区记录快照生成间的写命令")]),s._v(" "),n("li",[s._v("master 执行完 bgsave 后向 slave 发送 rdb 快照")]),s._v(" "),n("li",[s._v("slave 收到后载入快照")]),s._v(" "),n("li",[s._v("master 发送缓存区命令")]),s._v(" "),n("li",[s._v("slave 执行收到的缓存区命令")])]),s._v(" "),n("blockquote",[n("p",[s._v("2.8 版本后使用 psync 代替 sync")])]),s._v(" "),n("h4",{attrs:{id:"增量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#增量"}},[s._v("#")]),s._v(" 增量")]),s._v(" "),n("p",[s._v("当 master 发生数据增减时出发 replicationFeedSalves 函数,master 每调用一个命令判断命令是否有数据更新,如果有且 slave 节点不为空就会执行该函数把用户执行的命令发送到 slave 节点.")]),s._v(" "),n("h3",{attrs:{id:"哨兵"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#哨兵"}},[s._v("#")]),s._v(" 哨兵")]),s._v(" "),n("p",[s._v("监控主从节点和其它哨兵,自动切换主节点,并通过发布订阅模式通知其它从节点.")]),s._v(" "),n("ol",[n("li",[s._v("sentinel 每秒向 master、slave、其它 sentinel 发送 ping")]),s._v(" "),n("li",[s._v("如果一个 实例距离最后一次有效回复超过 down-after-milliseconds 则被标记为主观下线")]),s._v(" "),n("li",[s._v("如果 master 被标记为主观下限,则以每秒一次的频率向其它 sentinel 确认 master 进入主观下线")]),s._v(" "),n("li",[s._v("当有足够数量的 sentinel 确认,则 master 被标记为客观下线")]),s._v(" "),n("li",[s._v("一般情况下 sentinel 会每 10s 的频率向 master、slave、sentinel 发送 info 命令")]),s._v(" "),n("li",[s._v("当 master 标记为客观下线后,频率会升级为每秒一次")]),s._v(" "),n("li",[s._v("如果没有足够数量 sentinel 同意会移除 master 客观下线状态、如果 master 重新向 sentinel 的 ping 返回有效回复,master 主观下线会被移除")])]),s._v(" "),n("h3",{attrs:{id:"集群部署"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#集群部署"}},[s._v("#")]),s._v(" 集群部署")]),s._v(" "),n("h4",{attrs:{id:"消息类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#消息类型"}},[s._v("#")]),s._v(" 消息类型")]),s._v(" "),n("ul",[n("li",[s._v("meet : 新节点加入,随后周期性 ping、pong 交换")]),s._v(" "),n("li",[s._v("ping : 交换最频繁的消息,用于检测检点是否在线和交换彼此状态信息")]),s._v(" "),n("li",[s._v("pong : 回复 meet 和 ping,封装自身状态信息,也可向集群广播 pong 消息来通知整个集群对自身状态进行更新")]),s._v(" "),n("li",[s._v("fail : 当节点判断集群内另一个节点显现时会广播一个 fail 消息,其它节点收到后会把对应节点更新为下线状态")])]),s._v(" "),n("h3",{attrs:{id:"故障转移"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#故障转移"}},[s._v("#")]),s._v(" 故障转移")]),s._v(" "),n("p",[s._v("集群通过 ping、pong 实现故障发现,包括客观下线和主观下线,当下线主节点是,集群会统计持有槽的主节点投票,当大于一半时标记为客观下线.")])])}),[],!1,null,null,null);t.default=e.exports}}]);