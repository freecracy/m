(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{491:function(t,s,a){t.exports=a.p+"assets/img/go-mutex-state.ff33a56f.png"},492:function(t,s,a){t.exports=a.p+"assets/img/go-mutex-lock-unlock.baeca015.png"},526:function(t,s,a){"use strict";a.r(s);var n=a(20),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"第二章-常见控制结构实现原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第二章-常见控制结构实现原理"}},[t._v("#")]),t._v(" 第二章 : 常见控制结构实现原理")]),t._v(" "),n("h2",{attrs:{id:"defer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#defer"}},[t._v("#")]),t._v(" defer")]),t._v(" "),n("p",[t._v("用于延迟函数调用,每次 defer 都会把一个函数压入栈中,函数返回前把延迟的函数取出来执行.设计初衷是简化函数返回时资源的清理动作,资源一般有依赖顺序释放时要反向进行,每申请到一个用完需要释放的资源立即定义一个 defer 来释放资源.")]),t._v(" "),n("h3",{attrs:{id:"例子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#例子"}},[t._v("#")]),t._v(" 例子")]),t._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" aint "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defer")]),t._v(" fmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aint"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1 延迟函数参数在 defer 语句出现时已经确定,无论后面怎么修改都不会影响延迟函数")]),t._v("\n\taint "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br")])]),n("h3",{attrs:{id:"规则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#规则"}},[t._v("#")]),t._v(" 规则")]),t._v(" "),n("ol",[n("li",[t._v("延迟函数的参数在 defer 语句出现时就已经确定, 对于指针类型参数,延迟函数的参数是一个地址值,后面的语句对变量的修改可能会影响延迟函数")]),t._v(" "),n("li",[t._v("延迟函数的执行按后进先出顺序执行,即先出现的 defer 最后执行")]),t._v(" "),n("li",[t._v("延迟函数可能操作主函数的具名返回值")])]),t._v(" "),n("h3",{attrs:{id:"函数返回过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数返回过程"}},[t._v("#")]),t._v(" 函数返回过程")]),t._v(" "),n("p",[t._v("returen 不是一个原子操作,return 只代理汇编指令 ret, 即跳转语句执行,比如 "),n("code",[t._v("return i")]),t._v("实际上分两步即将 i 值存入栈中作为返回值,然后执行跳转而 defer 的执行时机正好是跳转前,所以 defer 执行时有机会操作返回值(返回值没有名字没有关系).")]),t._v(" "),n("h4",{attrs:{id:"主函数拥有匿名返回值-返回字面值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#主函数拥有匿名返回值-返回字面值"}},[t._v("#")]),t._v(" 主函数拥有匿名返回值,返回字面值")]),t._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defer")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\ti"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// return 语句直接把 1 写入栈中作为返回值,延迟函数无法操作该返回值,所以无法影响返回值")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br")])]),n("h4",{attrs:{id:"主函数拥有匿名返回值-返回变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#主函数拥有匿名返回值-返回变量"}},[t._v("#")]),t._v(" 主函数拥有匿名返回值,返回变量")]),t._v(" "),n("p",[t._v("主函数拥有一个匿名返回值返回本地或全局变量这种情况下 defer 可以引用返回值,但不会改变返回值.")]),t._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defer")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\ti"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" i\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br")])]),n("h4",{attrs:{id:"主函数拥有具名返回值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#主函数拥有具名返回值"}},[t._v("#")]),t._v(" 主函数拥有具名返回值")]),t._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defer")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tret"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])]),n("h3",{attrs:{id:"结构体-实现原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#结构体-实现原理"}},[t._v("#")]),t._v(" 结构体(实现原理)")]),t._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// runtime/runtime2.go:_defer")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" _defer "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tsiz     "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// includes both arguments and results")]),t._v("\n\tstarted "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("\n\theap    "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("\n\topenDefer "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("\n\tsp        "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uintptr")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数栈地址")]),t._v("\n\tpc        "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uintptr")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 程序计数器")]),t._v("\n\tfn        "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("funcval "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数地址")]),t._v("\n\t_panic    "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("_panic  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// panic that is running defer")]),t._v("\n\tlink      "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("_defer  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向自身结构的指针,用于连接多个 defer")]),t._v("\n\tfd   unsafe"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pointer "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// funcdata for the function associated with the frame")]),t._v("\n\tvarp "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uintptr")]),t._v("        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// value of varp for the stack frame")]),t._v("\n\tframepc "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uintptr")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br")])]),n("p",[t._v("每个 goroutine 数据结构中实际上也有一个 defer 指针,该指针指向一个 defer 的单链表,每次声明一个 defer 时就将 defer 插入到单链表表头,每次执行 defer 时就从单链表表头取出一个 defer 执行.新声明的 defer 总是添加到链表头部.函数返回前执行 defer 则从链表首部依次取出执行.一个 goroutine 可能调用多个函数,进入函数时添加 defer,离开函数时取出 defer,即便调用多个函数也总能保证 FIFO 方式执行.")]),t._v(" "),n("h3",{attrs:{id:"创建和执行"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建和执行"}},[t._v("#")]),t._v(" 创建和执行")]),t._v(" "),n("p",[t._v("在编译阶段声明 defer 处插入 "),n("code",[t._v("deferproc()")]),t._v("函数,在函数 return 前插入 "),n("code",[t._v("deferreturn()")]),t._v("函数.")]),t._v(" "),n("h4",{attrs:{id:"创建"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建"}},[t._v("#")]),t._v(" 创建")]),t._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在声明 defer 处调用,将 defer 函数存入 goroutine 的链表中")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("deferproc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("siz "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fn "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("funcval"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// arguments of fn follow fn")]),t._v("\n\tgp "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getg")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" gp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("m"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("curg "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" gp "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// go code on the system stack can't defer")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("throw")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"defer on system stack"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tsp "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getcallersp")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\targp "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("uintptr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unsafe"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pointer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("fn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" unsafe"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sizeof")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tcallerpc "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getcallerpc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\td "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("newdefer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("siz"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" d"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_panic "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("throw")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"deferproc: d.panic != nil after newdefer"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\td"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("link "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" gp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_defer\n\tgp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_defer "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" d\n\td"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fn "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fn\n\td"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pc "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" callerpc\n\td"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sp "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sp\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" siz "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Do nothing.")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" sys"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PtrSize"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uintptr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("deferArgs")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uintptr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unsafe"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pointer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("memmove")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("deferArgs")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" unsafe"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pointer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("uintptr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("siz"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("return0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br")])]),n("h4",{attrs:{id:"执行"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#执行"}},[t._v("#")]),t._v(" 执行")]),t._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在 returen(ret) 指令前调用,将 defer 从 goroutine 链表中取出并执行")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("deferreturn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg0 "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uintptr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tgp "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getg")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\td "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" gp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_defer\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" d "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tsp "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getcallersp")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" d"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sp "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" sp "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" d"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("openDefer "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tdone "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("runOpenDeferFrame")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("gp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("done "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("throw")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unfinished open-coded defers in deferreturn"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\tgp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_defer "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" d"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("link\n\t\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("freedefer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" d"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("siz "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Do nothing.")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" sys"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PtrSize"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uintptr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unsafe"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pointer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("arg0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uintptr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("deferArgs")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("memmove")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unsafe"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pointer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("arg0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("deferArgs")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("uintptr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("siz"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tfn "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" d"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fn\n\td"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fn "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v("\n\tgp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_defer "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" d"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("link\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("freedefer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fn\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("jmpdefer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("uintptr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unsafe"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pointer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("arg0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br"),n("span",{staticClass:"line-number"},[t._v("33")]),n("br"),n("span",{staticClass:"line-number"},[t._v("34")]),n("br"),n("span",{staticClass:"line-number"},[t._v("35")]),n("br")])]),n("h3",{attrs:{id:"小结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),n("ol",[n("li",[t._v("defer 定义的延迟函数参数在 defer 语句出现时就已经确定下来了")]),t._v(" "),n("li",[t._v("定义顺序与执行顺序相反")]),t._v(" "),n("li",[t._v("return 不是原子操作,执行过程 : 保存返回值(若有)、执行 defer (若有)、执行 ret 跳转")]),t._v(" "),n("li",[t._v("申请资源后立即使用 defer 关闭资源是个好习惯")])]),t._v(" "),n("h2",{attrs:{id:"select"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#select"}},[t._v("#")]),t._v(" select")]),t._v(" "),n("h3",{attrs:{id:"例子-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#例子-2"}},[t._v("#")]),t._v(" 例子")]),t._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])]),n("p",[t._v("对于空 select 程序会被阻塞,即当前 goroutine 会被阻塞,同时 go 自带死锁检测机制当发现当前 goroutine 再也没有机会被唤醒时则会 panic.")]),t._v(" "),n("h3",{attrs:{id:"case-结构体"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#case-结构体"}},[t._v("#")]),t._v(" case 结构体")]),t._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// runtime/select.go:scase")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" scase "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tc           "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("hchan         "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// chan")]),t._v("\n\telem        unsafe"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pointer "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// data element")]),t._v("\n\tkind        "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint16")]),t._v("\n\tpc          "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uintptr")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// race pc (for race detector / msan)")]),t._v("\n\treleasetime "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\tcaseNil     "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),t._v("\n\tcaseRecv    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// case 语句中尝试读取 scase.c 中的数据")]),t._v("\n\tcaseSend    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// case 语句中尝试向 scase.c 中写入数据")]),t._v("\n\tcaseDefault "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// default 语句")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br")])]),n("ol",[n("li",[t._v("scase.c 当前 case 语句所操作的 channel 指针,一个 case 语句只能操作一个 channel")]),t._v(" "),n("li",[t._v("scase.kind 表示该 case 的类型,分为读 channel、写 channel、default")]),t._v(" "),n("li",[t._v("scase.elem 表示缓存区地址,根据 scase.kind 不同有不同的用途")])]),t._v(" "),n("blockquote",[n("p",[t._v("scase.kind = caseRecv : scase.elem 表示读出 channel 的数据存放地址")]),t._v(" "),n("p",[t._v("scase.kind = caseSend : scase.elem 表示将要写入 channel 的数据存放地址")])]),t._v(" "),n("h3",{attrs:{id:"select-实现逻辑"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#select-实现逻辑"}},[t._v("#")]),t._v(" select 实现逻辑")]),t._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// runtime/select.go:selectgo")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("selectgo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cas0 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("scase"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" order0 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint16")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ncases "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 锁定 scase 语句中所有 channel")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. 按照随机顺序检测 scase 中 channel 是否 ready")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    2.1 如果 case 可读,则读取 channel 中数据,解锁所有的 channel,然后返回 (case index, true)")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    2.2 如果 case 可写,则将数据写入 channel,解锁所有 channel,然后返回 (case index, false)")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    2.3 所有 case 都未 ready,则解锁所有 channel,然后返回 (default index, false)")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3. 所有 case 都未 ready,且没有 default 语句")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    3.1 将当前 goroutine 加入到所有 channel 的等待队列")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    3.2 将当前 goroutine 转入阻塞,等待被唤醒")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4. 唤醒后返回 channel 对应的 case index")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    4.1 如果是读操作,解锁所有 channel,然后返回 (case index, true)")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    4.2 如果是写操作,解锁所有 channel,然后返回 (case index, false)")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// pollorder : 每次 selectgo 执行都会把 scase 序列打乱,以达到随机检测 case 的目的")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// lockorder : 所有 case 语句中的 channel 序列,以达到去重防止 channel 加锁时重复加锁")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br")])]),n("blockquote",[n("p",[t._v("对于读 channel 的 case 来说, 如"),n("code",[t._v("case elem,ok := <-chan")]),t._v(",如果 chanenl 有可能被其它 roroutine 关闭的情况下一定要检测读取是否成功,因为 close 的 channel 也有可能返回,此时"),n("code",[t._v("ok == false")]),t._v(".")])]),t._v(" "),n("h4",{attrs:{id:"函数参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数参数"}},[t._v("#")]),t._v(" 函数参数")]),t._v(" "),n("ol",[n("li",[t._v("cas0 : 为 scase 数组的首地址, selectgo() 就是从这行 scase 中找出一个返回")]),t._v(" "),n("li",[t._v("order0 : 为一个两倍 cas0 数组长度的 buffer,保存 scase 随机序列 pollorder 和 scase 中 channel 地址序列 lockorder")]),t._v(" "),n("li",[t._v("ncases : 表示 scase 数组的长度")])]),t._v(" "),n("h4",{attrs:{id:"函数返回值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数返回值"}},[t._v("#")]),t._v(" 函数返回值")]),t._v(" "),n("ol",[n("li",[t._v("int : 选中 case 的编号,这个 case 编号跟代码一致")]),t._v(" "),n("li",[t._v("bool : 是否成功从 channel 中读取了数据,如果选中 case 是从 channel 中读取数据,则该返回值表示是否读取成功")])]),t._v(" "),n("h3",{attrs:{id:"小结-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#小结-2"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),n("ol",[n("li",[t._v("select 语句中除 default 外,每个 case 操作一个 channel,要么读要么写")]),t._v(" "),n("li",[t._v("select 语句中除 default 外,各 case 执行顺序是随机的")]),t._v(" "),n("li",[t._v("select 语句中如果没有 default,则会阻塞等待任一 case")]),t._v(" "),n("li",[t._v("select 语句中读操作要判断是否成功读取,关闭的 channel 也可以读取")])]),t._v(" "),n("h2",{attrs:{id:"range"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#range"}},[t._v("#")]),t._v(" range")]),t._v(" "),n("h3",{attrs:{id:"例子-遍历切片"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#例子-遍历切片"}},[t._v("#")]),t._v(" 例子-遍历切片")]),t._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("RangeSlice")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("slice "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" index"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("range")]),t._v(" slice "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" index"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 优化 : 遍历过程中每次迭代会对 index 和 value 进行赋值,如果数据量或 value 类型为 string 时,对 value 的赋值操作可能是多余的,可在 for-range 中忽略 value 值,使用 slice[index] 引用 value 的值")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])]),n("h3",{attrs:{id:"例子-遍历-map"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#例子-遍历-map"}},[t._v("#")]),t._v(" 例子-遍历 map")]),t._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("RangeMap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myMap "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("map")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("range")]),t._v(" myMap "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" myMap"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 优化 : for-range 只获取 key,然后根据 key 值获取 value 值,看似减少了一次赋值,但通过 key 值查找 value 值性能消耗可能高于赋值消耗,能否优化取决于 map 存储数据结构的特征,实际情况进行优化")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])]),n("h3",{attrs:{id:"例子-动态遍历"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#例子-动态遍历"}},[t._v("#")]),t._v(" 例子-动态遍历")]),t._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tv "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("range")]),t._v(" v "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tv "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 能够正常结束,循环内改变切片长度,不影响循环次数,循环次数在循环开始前就已经确定了")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br")])]),n("h3",{attrs:{id:"实现原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[t._v("#")]),t._v(" 实现原理")]),t._v(" "),n("p",[t._v("range 支持数组、数组指针、切片、map、channel.")]),t._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// golang/gofrontend/blob/master/go/statements.cc:For_range_statement::do_lower()")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Arrange to do a loop appropriate for the type.  We will produce")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   for INIT ; COND ; POST {")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//           ITER_INIT")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//           INDEX = INDEX_TEMP")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//           VALUE = VALUE_TEMP // If there is a value")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//           original statements")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   }")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br")])]),n("h4",{attrs:{id:"range-for-slice"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#range-for-slice"}},[t._v("#")]),t._v(" range for slice")]),t._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The loop we generate:")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   for_temp := range")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   len_temp := len(for_temp)")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   for index_temp = 0; index_temp < len_temp; index_temp++ {")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//           value_temp = for_temp[index_temp]")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//           index = index_temp")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//           value = value_temp")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//           original body")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   }")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br")])]),n("p",[t._v("遍历 slice 前先获得 slice 的长度 len_temp 作为循环次数,循环体中每次循环会先获取元素值,如果 for-range 中接收 index 和 value 的话,会对 index 和 value 进行一次赋值.由于循环开始前,循环次数就已经确定了所以循环过程中新添加元素是没有办法遍历到的.数组与数组指针的遍历过程与 slice 基本一致.")]),t._v(" "),n("h4",{attrs:{id:"range-for-map"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#range-for-map"}},[t._v("#")]),t._v(" range for map")]),t._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The loop we generate:")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   var hiter map_iteration_struct")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   for mapiterinit(type, range, &hiter); hiter.key != nil; mapiternext(&hiter) {")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//           index_temp = *hiter.key")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//           value_temp = *hiter.val")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//           index = index_temp")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//           value = value_temp")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//           original body")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   }")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br")])]),n("p",[t._v("遍历 map 时没有指定循环次数,循环体与遍历 slice 类似.由于 map 底层实现与 slice 不同, map 底层采用 hash 表实现的,插入位置是随机的,所以遍历过程中新插入的数据不能保证遍历到.")]),t._v(" "),n("h4",{attrs:{id:"range-for-channel"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#range-for-channel"}},[t._v("#")]),t._v(" range for channel")]),t._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The loop we generate:")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   for {")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//           index_temp, ok_temp = <-range")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//           if !ok_temp {")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//                   break")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//           }")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//           index = index_temp")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//           original body")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   }")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br")])]),n("p",[t._v("channel 遍历依次从 channel 中读取数据,读取前是不知道有多少个元素的,如果 channel 中没有元素,则会阻塞等待,如果 channel 已被关闭则会解除阻塞并退出循环.")]),t._v(" "),n("blockquote",[n("p",[t._v("index_temp 实际上应该为 value_temp,因为 index 对于 channel 没有意义")]),t._v(" "),n("p",[t._v("使用 for-range 遍历 channel 时只能获取一个返回值")])]),t._v(" "),n("h3",{attrs:{id:"小结-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#小结-3"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),n("ol",[n("li",[t._v("遍历过程中适情况放弃 index 或 value,可以一定程度上提高性能")]),t._v(" "),n("li",[t._v("遍历 channel 时,如果 channel 没有数据,可能会阻塞")]),t._v(" "),n("li",[t._v("尽量避免遍历过程中修改原数据")]),t._v(" "),n("li",[t._v("for-range 的实现实际上是 C 风格的 for 循环")]),t._v(" "),n("li",[t._v("使用 index 和 value 接收 range 返回值会发生一次数据拷贝")])]),t._v(" "),n("h2",{attrs:{id:"mutex"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mutex"}},[t._v("#")]),t._v(" mutex")]),t._v(" "),n("h3",{attrs:{id:"结构体"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#结构体"}},[t._v("#")]),t._v(" 结构体")]),t._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// sync/mutex.go:Mutex")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Mutex "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tstate "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),t._v("\n\tsema  "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint32")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br")])]),n("ol",[n("li",[t._v("Mutex.state : 表示互斥锁的状态,比如是否被锁定等, 32 位的整型变量,内部实现时把该变量分成 4 份,记录 4 种状态")]),t._v(" "),n("li",[t._v("Mutex.sema : 表示信号量,协程阻塞等待该信号量,解锁的协程释放信号量从而唤醒等待信号的协程")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(491),alt:"go-mutex-state"}})]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("状态")]),t._v(" "),n("th",[t._v("描述")]),t._v(" "),n("th",[t._v("位数")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("locked")]),t._v(" "),n("td",[t._v("表示该 Mutex 是否被锁定, 0 没有锁定, 1 已被锁定")]),t._v(" "),n("td",[t._v("1 bit")])]),t._v(" "),n("tr",[n("td",[t._v("woken")]),t._v(" "),n("td",[t._v("是否有协程已被唤醒, 0 没有协程唤醒 1 已有协程唤醒正在加锁过程中")]),t._v(" "),n("td",[t._v("1 bit")])]),t._v(" "),n("tr",[n("td",[t._v("starving")]),t._v(" "),n("td",[t._v("是否处于饥饿状态, 0 没有饥饿 1 饥饿状态,有协程阻塞了超过 1 ms")]),t._v(" "),n("td",[t._v("1 bit")])]),t._v(" "),n("tr",[n("td",[t._v("waiter")]),t._v(" "),n("td",[t._v("表示阻塞等待锁的协程个数,协程解锁时根据该值判断是否需要释放信号量")]),t._v(" "),n("td",[t._v("29 bit")])])])]),t._v(" "),n("p",[t._v("协程之间抢锁实际上是抢给 locked 赋值的权利,能给 locked 置 1,就说明抢锁成功.抢不到的话就阻塞等待 Mutex.sema 信号量,一旦持有锁的协程解锁,等待的协程会依次被唤醒, woken 和 starving 主要用于控制协程间的抢锁过程.")]),t._v(" "),n("h3",{attrs:{id:"加锁过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#加锁过程"}},[t._v("#")]),t._v(" 加锁过程")]),t._v(" "),n("p",[t._v("加锁分为成功和失败两种情况,成功直接获取锁,失败后当前协程被阻塞")]),t._v(" "),n("h4",{attrs:{id:"简单加锁"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简单加锁"}},[t._v("#")]),t._v(" 简单加锁")]),t._v(" "),n("p",[t._v("只有一个协程在加锁,没有其它协程干扰,加锁过程获取判断 locked 标志位是否为 0,如果 0 则把 locked 位置 1,代表加锁成功,加锁成功后只是 locked 位置 1,其它状态位没有发生变化.")]),t._v(" "),n("h4",{attrs:{id:"加锁被阻塞"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#加锁被阻塞"}},[t._v("#")]),t._v(" 加锁被阻塞")]),t._v(" "),n("p",[t._v("假设加锁时,锁已被其它协程占用了,当一个协程对一个已被占用的锁再次加锁时, waiter 计数器增加了 1,此时协程被阻塞,直到 locked 位变为 0 后才会被唤醒.")]),t._v(" "),n("h3",{attrs:{id:"解锁过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解锁过程"}},[t._v("#")]),t._v(" 解锁过程")]),t._v(" "),n("h4",{attrs:{id:"简单解锁"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简单解锁"}},[t._v("#")]),t._v(" 简单解锁")]),t._v(" "),n("p",[t._v("由于没有其它协程阻塞等待加锁,此时解锁时只需要把 locked 位置 0 即可,不需要释放信号量.")]),t._v(" "),n("h4",{attrs:{id:"解锁并唤醒协程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解锁并唤醒协程"}},[t._v("#")]),t._v(" 解锁并唤醒协程")]),t._v(" "),n("p",[t._v("假设解锁时有一个或多个协程阻塞,解锁过程分为 2 步,一是把 locked 位置 0,二是查看到 waiter > 0 所以释放一个信号量,唤醒一个阻塞的协程被唤醒的协程把 locked 位置 1,于是新协程获取到锁.")]),t._v(" "),n("p",[n("img",{attrs:{src:a(492),alt:"go-mutex-lock-unlock"}})]),t._v(" "),n("h3",{attrs:{id:"自旋过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自旋过程"}},[t._v("#")]),t._v(" 自旋过程")]),t._v(" "),n("p",[t._v("加锁时如果当前 locked 位为 1,说明该锁由其它协程持有,尝试加锁的协程并不会马上转入阻塞,而会持续的 locked 位是否变为 0,这个过程即为自旋过程.自旋过程时间很短,但如果在自旋过程中发现锁已被释放那么协程可以立即获取锁.此时即便有协程被唤醒也无法获取锁,只能再次阻塞,自旋的好处是当加锁失败时不会立即转入阻塞,有一定机会获取到锁,这样可以避免协程的切换.")]),t._v(" "),n("p",[t._v("自旋对应 cpu 的 PAUSE 指令, cpu 对该指令什么都不做相当于 cpu 空转,对程序而言相当于 sleep 了一小段时间,时间非常短,当前实现是 30 个时钟周期.自旋过程中会持续探测 locked 是否变为 0,连续两次探测间隔就是执行这些 PAUSE 指令,不同于 sleep,不需要将协程转为睡眠状态.")]),t._v(" "),n("h4",{attrs:{id:"自旋条件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自旋条件"}},[t._v("#")]),t._v(" 自旋条件")]),t._v(" "),n("p",[t._v("加锁时程序会自动判断是否可以自旋,无限制的自旋会给 cpu 带来压力.总而言之,就是在不忙的时候才会启用自旋.")]),t._v(" "),n("ol",[n("li",[t._v("自旋次数要足够小,通常为 4,自旋最多 4 次")]),t._v(" "),n("li",[t._v("cpu 核数要大于 1,否则自旋没有意义,因为此时不可能有其它协程释放锁")]),t._v(" "),n("li",[t._v("协程调度机制中的 process 数量要大于 1,比如使用"),n("code",[t._v("GOMAXPROCS()")]),t._v("将处理器设置为 1 就不能启用自旋")]),t._v(" "),n("li",[t._v("协程调度机制中的可运行队列必须为空,否则会延迟协程调度")])]),t._v(" "),n("h4",{attrs:{id:"自旋的优势"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自旋的优势"}},[t._v("#")]),t._v(" 自旋的优势")]),t._v(" "),n("p",[t._v("充分利用 cpu,避免协程切换,因为当前申请加锁的协程拥有 cpu,如果经过短时间的自旋可以获得锁,当前协程可以继续运行,不必进入阻塞状态.")]),t._v(" "),n("h4",{attrs:{id:"自旋问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自旋问题"}},[t._v("#")]),t._v(" 自旋问题")]),t._v(" "),n("p",[t._v("如果自旋过程中获得锁,之前阻塞的协程将无法获得锁,如果加锁协程特别多,每次都通过自旋获得锁,那么之前被阻塞的协程将很难获得锁,从而进入饥饿状态.为避免协程长时间无法获取锁,1.8 版本后增加了一个状态,即 Mutex.starving.这个状态下不会自旋,一旦有协程释放锁那么一定会唤醒一个协程并成功加锁.")]),t._v(" "),n("h3",{attrs:{id:"mutex模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mutex模式"}},[t._v("#")]),t._v(" Mutex模式")]),t._v(" "),n("h3",{attrs:{id:"normal-模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#normal-模式"}},[t._v("#")]),t._v(" normal 模式")]),t._v(" "),n("p",[t._v("默认模式,该模式下协程如果加锁不成功,不会立即转入阻塞排队,而是判断是否满足自旋条件,如果满足会启动自旋过程,尝试抢锁.")]),t._v(" "),n("h3",{attrs:{id:"starvation-模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#starvation-模式"}},[t._v("#")]),t._v(" starvation 模式")]),t._v(" "),n("p",[t._v("自旋过程中如果能抢到锁,意味着同一时刻有协程释放了锁,释放锁时如果发现有阻塞等待的协程还会释放一个信号量来唤醒一个等待协程,被唤醒的协程得到 cpu 后开始执行,此时发现锁已被抢占了自己只好再次阻塞不过在阻塞前会判断自上次阻塞到本地阻塞经过了多长时间如果超过 1ms 的话会将 Mutex 标记为极饿模式,然后再阻塞,处于饥饿模式不会启动自旋过程,一旦有协程释放了锁,那么一定会唤醒协程,被唤醒的协程将会成功获取锁,同时把等待计数减 1.")]),t._v(" "),n("h3",{attrs:{id:"woken-状态"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#woken-状态"}},[t._v("#")]),t._v(" woken 状态")]),t._v(" "),n("p",[t._v("woken 状态用于加锁解锁的通信,同一时刻,两个协程一个在加锁一个在解锁,在加锁的协程可能在自旋过程中,此时将 woken 标记为 1,用于通知解锁协程不必释放信号量了,意思是只管解锁不必释放信号量,我马上就可以拿到锁.")]),t._v(" "),n("h3",{attrs:{id:"重复解锁发生-panic"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#重复解锁发生-panic"}},[t._v("#")]),t._v(" 重复解锁发生 panic")]),t._v(" "),n("p",[t._v("如果多次 unlock 可能每次都释放一个信号量,这样会唤醒多个协程,多个协程唤醒后会继续在 lock 逻辑里抢锁,会增加 lock 实现复杂度,也会引起不必要的协程切换.")]),t._v(" "),n("h3",{attrs:{id:"tips"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tips"}},[t._v("#")]),t._v(" tips")]),t._v(" "),n("ol",[n("li",[t._v("使用 defer 避免死锁 : 加锁后立即使用 defer 对其解锁,可以有效避免死锁")]),t._v(" "),n("li",[t._v("加锁和解锁应该成对出现 : 最好在一个层次的代码中,比如同一个函数,重复解锁会 panic,应避免这种操作的可能性")])]),t._v(" "),n("h2",{attrs:{id:"rwmutex"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#rwmutex"}},[t._v("#")]),t._v(" RWMutex")]),t._v(" "),n("h3",{attrs:{id:"解决问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解决问题"}},[t._v("#")]),t._v(" 解决问题")]),t._v(" "),n("ol",[n("li",[t._v("写锁需要阻塞写锁 : 一个协程拥有写锁时,其它协程写锁定需要阻塞")]),t._v(" "),n("li",[t._v("写锁需要阻塞读锁 : 一个协程拥有写锁时,其它协程读锁定需要阻塞")]),t._v(" "),n("li",[t._v("读锁需要阻塞写锁 : 一个协程拥有读锁时,其它协程写锁定需要阻塞")]),t._v(" "),n("li",[t._v("读锁不能阻塞读锁 : 一个协程拥有读锁时,其它协程可以也拥有读锁")])]),t._v(" "),n("h3",{attrs:{id:"结构体-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#结构体-2"}},[t._v("#")]),t._v(" 结构体")]),t._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// sync/rwmutex.go:RWMutex")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" RWMutex "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tw           Mutex  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用于控制多个写锁,获得写锁首先要获取该锁,如果有写锁正在进行,再来的写锁将会阻塞于此")]),t._v("\n\twriterSem   "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint32")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 写阻塞等待信号量,最后一个读锁释放时会释放该信号量")]),t._v("\n\treaderSem   "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint32")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 读阻塞协程等待的信号量,持有写锁的协程释放锁后会释放信号量")]),t._v("\n\treaderCount "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记录读读个数")]),t._v("\n\treaderWait  "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记录写阻塞的个数")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br")])]),n("ol",[n("li",[t._v("RLock() : 读锁定")]),t._v(" "),n("li",[t._v("RUnlock() : 解除读锁定")]),t._v(" "),n("li",[t._v("Lock() : 写锁定,与 Mutex 完全一致")]),t._v(" "),n("li",[t._v("Unlock() : 解除写锁定,与 Mutex 完全一致")])]),t._v(" "),n("h3",{attrs:{id:"lock"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#lock"}},[t._v("#")]),t._v(" Lock()")]),t._v(" "),n("ol",[n("li",[t._v("获取互斥锁")]),t._v(" "),n("li",[t._v("阻塞等待所有读操作结束(如果有读话)")])]),t._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rw "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("RWMutex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Lock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" race"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Enabled "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rw"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("w"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state\n\t\trace"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Disable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// First, resolve competition with other writers.")]),t._v("\n\trw"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("w"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Lock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Announce to readers there is a pending writer.")]),t._v("\n\tr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" atomic"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("AddInt32")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rw"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readerCount"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("rwmutexMaxReaders"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" rwmutexMaxReaders\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Wait for active readers.")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" r "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" atomic"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("AddInt32")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rw"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readerWait"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("runtime_SemacquireMutex")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rw"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("writerSem"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" race"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Enabled "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\trace"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Enable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\trace"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Acquire")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unsafe"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pointer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rw"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readerSem"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\trace"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Acquire")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unsafe"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pointer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rw"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("writerSem"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br")])]),n("h3",{attrs:{id:"unlock"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#unlock"}},[t._v("#")]),t._v(" Unlock()")]),t._v(" "),n("ol",[n("li",[t._v("唤醒因读锁定而阻塞的协程(如果有的话)")]),t._v(" "),n("li",[t._v("解除互斥锁")])]),t._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rw "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("RWMutex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Unlock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" race"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Enabled "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rw"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("w"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state\n\t\trace"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Release")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unsafe"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pointer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rw"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readerSem"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\trace"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Disable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Announce to readers there is no active writer.")]),t._v("\n\tr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" atomic"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("AddInt32")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rw"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readerCount"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rwmutexMaxReaders"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" r "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" rwmutexMaxReaders "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\trace"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Enable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("throw")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sync: Unlock of unlocked RWMutex"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Unblock blocked readers, if any.")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("runtime_Semrelease")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rw"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readerSem"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Allow other writers to proceed.")]),t._v("\n\trw"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("w"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Unlock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" race"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Enabled "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\trace"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Enable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br")])]),n("h3",{attrs:{id:"rlock"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#rlock"}},[t._v("#")]),t._v(" RLock()")]),t._v(" "),n("ol",[n("li",[t._v("增加读操作计数,即 readerCount++")]),t._v(" "),n("li",[t._v("阻塞,等待写操作结束(如果有读话)")])]),t._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rw "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("RWMutex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("RLock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" race"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Enabled "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rw"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("w"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state\n\t\trace"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Disable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" atomic"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("AddInt32")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rw"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readerCount"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// A writer is pending, wait for it.")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("runtime_SemacquireMutex")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rw"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readerSem"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" race"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Enabled "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\trace"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Enable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\trace"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Acquire")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unsafe"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pointer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rw"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readerSem"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br")])]),n("h3",{attrs:{id:"runlock"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#runlock"}},[t._v("#")]),t._v(" RUnlock()")]),t._v(" "),n("ol",[n("li",[t._v("减少读操作计数,即 readerCount--")]),t._v(" "),n("li",[t._v("唤醒等待写操作的协程(如果有的话)")])]),t._v(" "),n("div",{staticClass:"language-go line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rw "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("RWMutex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("RUnlock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" race"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Enabled "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rw"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("w"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state\n\t\trace"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ReleaseMerge")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unsafe"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pointer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rw"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("writerSem"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\trace"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Disable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" r "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" atomic"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("AddInt32")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rw"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readerCount"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" r "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Outlined slow-path to allow the fast-path to be inlined")]),t._v("\n\t\trw"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("rUnlockSlow")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" race"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Enabled "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\trace"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Enable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);